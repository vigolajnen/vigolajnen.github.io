(function () {
   // header scroll
   const body = document.body;
  //  const triggerMenu = document.querySelector(".page-header__btn-burger");

   const scrollUp = "scroll-up";
   const scrollDown = "scroll-down";
   let lastScroll = 0;

  //  triggerMenu.addEventListener("click", () => {
  //    body.classList.toggle("menu-open");
  //    triggerMenu.classList.toggle("active");
  //  });

   window.addEventListener("scroll", () => {
     const currentScroll = window.pageYOffset;
     if (currentScroll <= 0) {
       body.classList.remove(scrollUp);
       return;
     }

     if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) {
       // down
       body.classList.remove(scrollUp);
       body.classList.add(scrollDown);
     } else if (currentScroll < lastScroll && body.classList.contains(scrollDown)) {
       // up
       body.classList.remove(scrollDown);
       body.classList.add(scrollUp);
     }
     lastScroll = currentScroll;
   });
})()

// mob menu

export let mobileMenuToggle = () => {
  const page = document.querySelector('.page');
  const btnMenuOpen = document.querySelector('.page-header__btn-menu');
  const btnMenuOpenClose = document.querySelector('.mobile-menu__btn-close');
  const headerTop = document.querySelector('.page-header');
  const mobMenu = document.querySelector('.mobile-menu');

  if (btnMenuOpen) {
    btnMenuOpen.addEventListener('click', function() {
      headerTop.classList.add('page-header--mob');
      page.classList.add('page--overlay');
      mobMenu.classList.add('active');
    });
  }

  if (btnMenuOpenClose) {
    btnMenuOpenClose.addEventListener('click', function() {
      headerTop.classList.remove('page-header--mob');
      page.classList.remove('page--overlay');
      mobMenu.classList.remove('active');
    });
  }

  if (mobMenu) {
    mobMenu.addEventListener('click', () => {
      mobMenu.classList.remove('active');
    });
  }

  window.onresize = function() {
    if (window.screen.width > 768) {
      document.querySelector('.page').classList.remove('page--overlay');
      if (headerTop.classList.contains('page-header--mob')) {
        headerTop.classList.remove('page-header--mob');
      }
    }
  };
};



mobileMenuToggle();



// расписание

const templateLesson = lesson => {
  return (
    `<div class="lesson ` + lesson.dopClass +`" data-bs-content-id="popover-content" tabindex="0" role="button" data-bs-toggle="popover" data-bs-placement="bottom" data-bs-trigger="focus">
      <div class="lesson__wrapper">
        <div class="lesson__name">` + lesson.name +`</div>
        <div class="lesson__trainer">
          <span>` + lesson.trainer +`</span>
          <svg class="icon" width="15" height="18" viewBox="0 0 15 18">
            <use xlink:href="img/sprite.svg#sch-user"></use>
          </svg>
        </div>
        <div class="lesson__place">
          <span>` + lesson.place +`</span>
          ` + lesson.icon +`
        </div>
        <div class="d-none lesson__popover" id="popover-content">
          <h4 class="title">` + lesson.name +`</h4>
          <div class="text">` + lesson.content +`</div>
          <a class="lesson__link link-text link-text--more" href=` + lesson.url +`>
            <span>Информация о тренере</span>
          </a>
        </div>
      </div>
    </div>`
  );
};

const weekDaysDB = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];
const weekDaysMobDB = [
  'Понедельник',
  'Вторник',
  'Среда',
  'Четверг',
  'Пятница',
  'Суббота',
  'Воскресенье',
];
const nowWeekDaysDB = [
  '15.05',
  '16.05',
  '17.05',
  '18.05',
  '19.05',
  '20.05',
  '21.05',
];
const hoursMorningDB = ['09:00', '10:00', '11:00'];
const hoursDayDB = ['12:00', '13:00', '14:00', '15:00', '16:00'];
const hourseveningDB = ['17:00', '18:00', '19:00', '20:00', '21:00', '21:00', '21:00'];

const hoursAllDB = [...hoursMorningDB, ...hoursDayDB, ...hourseveningDB];

const placesDB = ['Большой аэробный зал', 'Большой бассейн'];
const trainersDB = ['Кайгородцева Татьяна', 'Малахова Елена'];
const poolIcon = item => {
  const svg = document.createElement('svg');
  svg.classList = 'icon';
  svg.setAttribute('width', '15');
  svg.setAttribute('height', '10');
  svg.setAttribute('viewBox', '0 0 15 10');
  svg.setAttribute('fill', 'none');
  svg.setAttribute('xmlns', 'ttp://www.w3.org/2000/svg');
  const path = document.createElement('path');
  path.setAttribute('fill-rule', 'evenodd');
  path.setAttribute('clip-rule', 'evenodd');
  path.setAttribute(
    'd',
    'M0.519442 9.77031C0.601866 9.84031 1.44065 9.00031 1.53278 8.80031H1.58126C1.64688 8.79117 1.70998 8.76826 1.76668 8.733C1.82339 8.69775 1.87249 8.65089 1.91096 8.59531C2.24875 8.14108 2.71712 7.80858 3.24914 7.64531C3.56143 7.53591 3.88902 7.48017 4.21884 7.48031C5.39702 7.48031 6.42005 8.20031 7.48187 8.61531C8.05835 8.86403 8.67526 8.99805 9.30005 9.01031C9.58216 9.0102 9.86342 8.97834 10.1388 8.91531C10.7908 8.78652 11.3875 8.45089 11.8455 7.95531C11.9473 7.83531 12.5922 7.09031 12.6697 6.95531C12.7389 6.84608 12.7639 6.71332 12.7394 6.58535C12.715 6.45737 12.643 6.34432 12.5388 6.27031C12.4635 6.2126 12.3707 6.18427 12.277 6.19031C12.1991 6.1881 12.122 6.20674 12.0532 6.24442C11.9843 6.2821 11.9262 6.33753 11.8843 6.40531L11.7679 6.57031C11.4625 6.93531 10.4831 7.82531 9.9449 7.95031C9.43948 8.04488 8.92024 8.02612 8.42247 7.89531C7.89573 7.73772 7.38313 7.53363 6.89035 7.28531C6.33019 7.00479 5.74788 6.77396 5.14974 6.59531C4.8455 6.51547 4.53277 6.47516 4.21884 6.47531C3.78506 6.47219 3.35391 6.54489 2.94368 6.69031C2.59091 6.80717 2.2562 6.97554 1.94974 7.19031C1.63607 7.41552 1.36219 7.69457 1.14005 8.01531C1.12326 8.03528 1.10863 8.05708 1.09641 8.08031C0.994593 8.32031 0.325502 9.64531 0.519442 9.77031ZM11.3994 2.63031C11.4004 2.29253 11.4983 1.96261 11.6809 1.68217C11.8635 1.40173 12.1225 1.18333 12.4253 1.05453C12.7281 0.925723 13.0611 0.892281 13.3823 0.958421C13.7035 1.02456 13.9985 1.18732 14.2301 1.42617C14.4617 1.66501 14.6196 1.96925 14.6837 2.30049C14.7478 2.63173 14.7154 2.97514 14.5905 3.28739C14.4656 3.59965 14.2538 3.86677 13.9819 4.05504C13.7099 4.24332 13.39 4.34432 13.0625 4.34531C12.8439 4.34597 12.6274 4.30206 12.4253 4.21611C12.2232 4.13016 12.0397 4.00386 11.8851 3.84447C11.7306 3.68509 11.6081 3.49577 11.5247 3.28739C11.4414 3.07902 11.3988 2.85571 11.3994 2.63031ZM5.09641 2.41531L8.24308 1.77031L8.29641 1.97531L8.45156 3.77031C8.39823 3.77031 4.84429 4.77031 4.11217 4.98531C4.6056 5.2556 5.13016 5.46055 5.67338 5.59531C7.75338 6.17531 9.29035 5.84031 10.6382 5.92031L9.18368 0.945312V0.915312C9.14406 0.777341 9.05613 0.659485 8.93695 0.584639C8.81778 0.509792 8.67589 0.483301 8.53884 0.510312L4.87338 1.27031C4.80115 1.28454 4.73244 1.31361 4.67133 1.35581C4.61023 1.398 4.55799 1.45244 4.51772 1.5159C4.47746 1.57935 4.44999 1.65052 4.43696 1.72515C4.42392 1.79978 4.42559 1.87636 4.44187 1.95031C4.47552 2.09648 4.56198 2.22391 4.68361 2.3066C4.80524 2.38929 4.95288 2.42102 5.09641 2.39531V2.41531Z',
  );
  path.setAttribute('fill', '#42474D');
  svg.appendChild(path);
  return item.appendChild(svg);
};

const lessonsDB = [
  {
    dopClass: '',
    name: 'Flex',
    content:
      'Внимание! Посещение урока возможно только в спортивной обуви или в носках. Комплекс упражнений направленный на растяжку и релаксацию. Подобные регулярные групповые тренировки помогут повысить тонус мышц, улучшить координацию, восстановить осанку, сделать движения пластичными. Рекомендуется для любого уровня подготовленности. Продолжительность занятий составляет 55 минут. Внимание! Посещение урока возможно только в спортивной обуви или в носках. Комплекс упражнений направленный на растяжку и релаксацию. Подобные регулярные групповые тренировки помогут повысить тонус мышц, улучшить координацию, восстановить осанку, сделать движения пластичными. Рекомендуется для любого уровня подготовленности. Продолжительность занятий составляет 55 минут.',
    icon:
      '<svg class="icon" width="17" height="20" viewBox="0 0 17 20"><use xlink:href="img/sprite.svg#sch-spa"></use></svg>',
  },
  {
    dopClass: 'lesson--pay',
    name: 'Fitness Yoga',
    content: '11',
    icon:
      '<svg class="icon" width="17" height="20" viewBox="0 0 17 20"><use xlink:href="img/sprite.svg#sch-spa"></use></svg>',
  },
  {
    dopClass: '',
    name: 'СЕКЦИЯ (9-11лет) «Бодибилдинг для мальчиков»',
    content: '33',
    icon:
      '<svg class="icon" width="20" height="20" viewBox="0 0 20 20"><use xlink:href="img/sprite.svg#sch-spa"></use></svg>',
  },
  {
    dopClass: 'lesson--pool',
    name: 'СЕКЦИЯ «Школа плавания 13»   (11-13 лет)',
    content: '44',
    icon:
      '<svg class="icon" width="15" height="10" viewBox="0 0 15 10"><use xlink:href="img/sprite.svg#sch-pool"></use></svg>',
  },
];

const createLesson = (k, j) => {
  return templateLesson({
    dopClass: lessonsDB[k].dopClass,
    name: lessonsDB[k].name,
    content: lessonsDB[k].content,
    icon: lessonsDB[k].icon,
    trainer: trainersDB[j],
    place: placesDB[j],
    url: '#',
  });
};

const getDayWeek = item => {
  if (window.matchMedia('(max-width: 767px)').matches) {
    return item.mobile;
  } else {
    return item.desctop;
  }
};

const scheduleDB = [
  {
    day: nowWeekDaysDB[0],
    lessons: [
      {
        hours: hoursAllDB[0],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[1],
        template: '',
      },
      {
        hours: hoursAllDB[2],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[3],
        template: createLesson(2, 0),
      },
      {
        hours: hoursAllDB[4],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[5],
        template: '',
      },
      {
        hours: hoursAllDB[6],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[7],
        template: createLesson(0, 0),
      },
      {
        hours: hoursAllDB[8],
        template: createLesson(1, 0),
      },
      {
        hours: hoursAllDB[9],
        template: '',
      },
      {
        hours: hoursAllDB[10],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[11],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[12],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[13],
        template: createLesson(2, 1),
      },
      {
        hours: hoursAllDB[14],
        template: '',
      },
    ],
  },
  {
    day: nowWeekDaysDB[1],
    lessons: [
      {
        hours: hoursAllDB[0],
        template: '',
      },
      {
        hours: hoursAllDB[1],
        template: '',
      },
      {
        hours: hoursAllDB[2],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[3],
        template: '',
      },
      {
        hours: hoursAllDB[4],
        template: '',
      },
      {
        hours: hoursAllDB[5],
        template: '',
      },
      {
        hours: hoursAllDB[6],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[7],
        template: '',
      },
      {
        hours: hoursAllDB[8],
        template: createLesson(1, 0),
      },
      {
        hours: hoursAllDB[9],
        template: '',
      },
      {
        hours: hoursAllDB[10],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[11],
        template: '',
      },
      {
        hours: hoursAllDB[12],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[13],
        template: '',
      },
      {
        hours: hoursAllDB[14],
        template: createLesson(2, 1),
      },
    ],
  },
  {
    day: nowWeekDaysDB[2],
    lessons: [
      {
        hours: hoursAllDB[0],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[1],
        template: '',
      },
      {
        hours: hoursAllDB[2],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[3],
        template: createLesson(2, 0),
      },
      {
        hours: hoursAllDB[4],
        template: '',
      },
      {
        hours: hoursAllDB[5],
        template: '',
      },
      {
        hours: hoursAllDB[6],
        template: '',
      },
      {
        hours: hoursAllDB[7],
        template: createLesson(0, 0),
      },
      {
        hours: hoursAllDB[8],
        template: createLesson(1, 0),
      },
      {
        hours: hoursAllDB[9],
        template: '',
      },
      {
        hours: hoursAllDB[10],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[11],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[12],
        template: '',
      },
      {
        hours: hoursAllDB[13],
        template: '',
      },
      {
        hours: hoursAllDB[14],
        template: '',
      },
    ],
  },
  {
    day: nowWeekDaysDB[3],
    lessons: [
      {
        hours: hoursAllDB[0],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[1],
        template: '',
      },
      {
        hours: hoursAllDB[2],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[3],
        template: createLesson(2, 0),
      },
      {
        hours: hoursAllDB[4],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[5],
        template: '',
      },
      {
        hours: hoursAllDB[6],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[7],
        template: createLesson(0, 0),
      },
      {
        hours: hoursAllDB[8],
        template: createLesson(1, 0),
      },
      {
        hours: hoursAllDB[9],
        template: '',
      },
      {
        hours: hoursAllDB[10],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[11],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[12],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[13],
        template: '',
      },
      {
        hours: hoursAllDB[14],
        template: '',
      },
    ],
  },
  {
    day: nowWeekDaysDB[4],
    lessons: [
      {
        hours: hoursAllDB[0],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[1],
        template: '',
      },
      {
        hours: hoursAllDB[2],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[3],
        template: createLesson(2, 0),
      },
      {
        hours: hoursAllDB[4],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[5],
        template: '',
      },
      {
        hours: hoursAllDB[6],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[7],
        template: createLesson(0, 0),
      },
      {
        hours: hoursAllDB[8],
        template: createLesson(1, 0),
      },
      {
        hours: hoursAllDB[9],
        template: '',
      },
      {
        hours: hoursAllDB[10],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[11],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[12],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[13],
        template: createLesson(2, 1),
      },
      {
        hours: hoursAllDB[14],
        template: createLesson(2, 1),
      },
    ],
  },
  {
    day: nowWeekDaysDB[5],
    lessons: [
      {
        hours: hoursAllDB[0],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[1],
        template: '',
      },
      {
        hours: hoursAllDB[2],
        template: '',
      },
      {
        hours: hoursAllDB[3],
        template: createLesson(2, 0),
      },
      {
        hours: hoursAllDB[4],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[5],
        template: '',
      },
      {
        hours: hoursAllDB[6],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[7],
        template: createLesson(0, 0),
      },
      {
        hours: hoursAllDB[8],
        template: createLesson(1, 0),
      },
      {
        hours: hoursAllDB[9],
        template: '',
      },
      {
        hours: hoursAllDB[10],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[11],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[12],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[13],
        template: createLesson(2, 1),
      },
      {
        hours: hoursAllDB[14],
        template: createLesson(2, 1),
      },
    ],
  },
  {
    day: nowWeekDaysDB[6],
    lessons: [
      {
        hours: hoursAllDB[0],
        template: '',
      },
      {
        hours: hoursAllDB[1],
        template: '',
      },
      {
        hours: hoursAllDB[2],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[3],
        template: createLesson(2, 0),
      },
      {
        hours: hoursAllDB[4],
        template: createLesson(3, 0),
      },
      {
        hours: hoursAllDB[5],
        template: '',
      },
      {
        hours: hoursAllDB[6],
        template: createLesson(1, 1),
      },
      {
        hours: hoursAllDB[7],
        template: createLesson(0, 0),
      },
      {
        hours: hoursAllDB[8],
        template: createLesson(1, 0),
      },
      {
        hours: hoursAllDB[9],
        template: '',
      },
      {
        hours: hoursAllDB[10],
        template: createLesson(0, 1),
      },
      {
        hours: hoursAllDB[11],
        template: '',
      },
      {
        hours: hoursAllDB[12],
        template: '',
      },
      {
        hours: hoursAllDB[13],
        template: createLesson(2, 1),
      },
      {
        hours: hoursAllDB[14],
        template: createLesson(2, 1),
      },
    ],
  },
];


const daysWeekMob = [
  'Воскресенье',
  'Понедельник',
  'Вторник',
  'Среда',
  'Четверг',
  'Пятница',
  'Суббота',
];
let nowDateSlice = new Date().toLocaleDateString().slice(0, -5);
let nowDate = new Date();
let nowDayWeek = nowDateSlice + ' ' + daysWeekMob[nowDate.getDay()];

const schedule = document.querySelector('.schedule');
const weekDays = document.querySelector('.week-days');
const scheduleDays = document.querySelector('.schedule__days');
const scheduleBtn = document.querySelector('.schedule__button');
const mobWeekDaysButton = document.querySelectorAll('.mob-week-days__item');
const hours = document.querySelector('.hours');
const weekDaysItems = document.querySelectorAll(
  '.week-days__item .week-days__item-date',
);

let activeDay = document.querySelector('.schedule__item-active');

const days = document.querySelectorAll('[data-weekday]');

if (window.matchMedia('(max-width: 767px)').matches) {
  mobActiveDay(nowDayWeek);
  mobWeekDays(weekDaysItems);
}

function mobActiveDay(day) {
  const days = document.querySelectorAll('.days');

  days.forEach(function(item) {
    item.classList.add('days--hidden');
    // console.log(item.getAttribute('data-weekDay').slice(0, 5));
    // console.log(day.slice(0, 5));
    if (item.getAttribute('data-weekDay').slice(0, 5) === day.slice(0, 5)) {
      item.classList.remove('days--hidden');
    }
  });
}

function mobWeekDays(items) {
  items.forEach(function(item) {
    item.parentElement.addEventListener('click', function(e) {
      e.preventDefault();

      const titleday = item.parentElement.querySelector('.d-flex.d-sm-none');
      let day = item.innerText;

      titleday ? (day = day + ' ' + titleday.innerText) : day;

      activeDay.innerText = '';
      activeDay.innerText = day;
      console.log(day);
      // console.log(day);

      mobActiveDay(day);

      onMenuClose();
    });
  });
}

// function mobWeekDays(items) {
//   items.forEach(function(item) {
//     item.parentElement.addEventListener('click', function(e) {
//       e.preventDefault();

//       const titleday = item.parentElement.querySelector('.d-flex.d-sm-none');
//       let day = e.target.innerText;

//       titleday ? (day = day + ' ' + titleday.innerText) : day;

//       activeDay.innerText = '';
//       activeDay.innerText = day;
//       console.log(day);
//       // console.log(day);

//       mobActiveDay(day);

//       onMenuClose();
//     });
//   });
// }

function onScheduleBtnClick(btn) {
  if (btn) {
    btn.addEventListener('click', function(evt) {
      evt.preventDefault();

      mobMenuToogle();

      if (weekDays.classList.contains('week-days--open')) {
        mobWeekDays(weekDaysItems);
      }
    });
  }
}

onScheduleBtnClick(scheduleBtn);

function onMenuClose() {
  scheduleBtn.classList.remove('schedule__button--open');
  weekDays.classList.remove('week-days--open');
  hours.classList.remove('hours--opacity');
}

function mobMenuToogle() {
  scheduleBtn.classList.toggle('schedule__button--open');
  weekDays.classList.toggle('week-days--open');

  hours.classList.toggle('hours--opacity');
}

function onMobWeekDaysButton(btn) {
  [...mobWeekDaysButton].filter(item => {
    if (item.innerText.toLocaleLowerCase() === btn.toLocaleLowerCase()) {
      item.classList.add('mob-week-days__item--active');
    } else {
      item.classList.remove('mob-week-days__item--active');
    }
  });
}

function createschedule() {
  const daysListElement = document.querySelector('.schedule__days');
  const weekDaysListElement = document.querySelector('.schedule__week-days');

  const hoursListElement = document.querySelector('.schedule__hours');
  const hoursListMorningElement = document.querySelector('.hours__morning');
  const hoursListDayElement = document.querySelector('.hours__day');
  const hoursListEveningElement = document.querySelector('.hours__evening');

  const mobNavElement = document.querySelector('.schedule__mob-nav');

  const scheduleFragment = document.createDocumentFragment();
  const hoursFragment = document.createDocumentFragment();
  const hoursMorningFragment = document.createDocumentFragment();
  const hoursDayFragment = document.createDocumentFragment();
  const hoursEveningFragment = document.createDocumentFragment();
  const weekDaysFragment = document.createDocumentFragment();
  const activeDayFragment = document.createDocumentFragment();
  const btnFragment = document.createDocumentFragment();

  const btn = document.createElement('button');
  btn.classList = 'schedule__button';
  btn.setAttribute('type', 'button');
  btn.setAttribute('aria-label', 'Выбор дня недели');
  const icon = '<svg class="icon" width="15" height="10" viewBox="0 0 15 10"><use xlink:href="img/sprite.svg#sch-pool"></use></svg>';

  const activeDay = document.createElement('span');
  activeDay.classList = 'schedule__item-active';
  activeDay.innerText = nowDayWeek;
  console.log(icon);
  btn.appendChild(activeDay);
  activeDayFragment.appendChild(btn);

  for (let i = 0; i < scheduleDB.length; i++) {
    const weekDayDiv = document.createElement('div');
    weekDayDiv.className = 'week-days__item';

    if (window.matchMedia('(max-width: 767px)').matches) {
      weekDayDiv.innerText = scheduleDB[i].day + ' ' + weekDaysMobDB[i];
    } else {
      weekDayDiv.innerText = scheduleDB[i].day + ' ' + weekDaysDB[i];
    }

    if (weekDaysListElement) {
      weekDaysListElement.appendChild(weekDayDiv);
    }

    let divParent = document.createElement('div');
    divParent.className = 'days';
    divParent.setAttribute('data-weekDay', scheduleDB[i].day);

    for (var j = 0; j < scheduleDB[i].lessons.length; j++) {
      // занятия
      var div = document.createElement('div');
      div.className = 'days__item';
      div.innerHTML = scheduleDB[i].lessons[j].template;
      div.setAttribute('data-hour', scheduleDB[i].lessons[j].hours);
      divParent.appendChild(div);
    }
    scheduleFragment.appendChild(divParent);
    weekDaysFragment.appendChild(weekDayDiv);
  }

  // часы
  // утро
  let hoursMorningDiv = document.createElement('div');
  hoursMorningDiv.className = 'hours__morning';

  for (let s = 0; s < hoursMorningDB.length; s++) {
    let hoursDiv = document.createElement('div');
    hoursDiv.className = 'hours__item';
    hoursDiv.innerText = hoursMorningDB[s];
    hoursDiv.setAttribute('data-hour', hoursMorningDB[s]);
    hoursMorningDiv.appendChild(hoursDiv);
    hoursMorningFragment.appendChild(hoursMorningDiv);
    hoursFragment.appendChild(hoursMorningFragment);
  }

  // день
  let hoursDayDiv = document.createElement('div');
  hoursDayDiv.className = 'hours__day';

  for (let s = 0; s < hoursDayDB.length; s++) {
    let hoursDiv = document.createElement('div');
    hoursDiv.className = 'hours__item';
    hoursDiv.innerText = hoursDayDB[s];
    hoursDiv.setAttribute('data-hour', hoursDayDB[s]);
    hoursDayDiv.appendChild(hoursDiv);
    hoursDayFragment.appendChild(hoursDayDiv);
    hoursFragment.appendChild(hoursDayFragment);
  }

  // вечер
  let hoursEveningDiv = document.createElement('div');
  hoursEveningDiv.className = 'hours__evening';

  for (let s = 0; s < hourseveningDB.length; s++) {
    let hoursDiv = document.createElement('div');
    hoursDiv.className = 'hours__item';
    hoursDiv.innerText = hourseveningDB[s];
    hoursDiv.setAttribute('data-hour', hourseveningDB[s]);
    hoursEveningDiv.appendChild(hoursDiv);
    hoursEveningFragment.appendChild(hoursEveningDiv);
    hoursFragment.appendChild(hoursEveningFragment);
  }

  if (daysListElement) {
    daysListElement.innerHTML = '';
    daysListElement.appendChild(scheduleFragment);
  }

  if (hoursListMorningElement) {
    hoursListMorningElement.innerHTML = '';
    hoursListMorningElement.appendChild(hoursMorningFragment);
  }

  if (hoursListDayElement) {
    hoursListDayElement.innerHTML = '';
    hoursListDayElement.appendChild(hoursDayFragment);
  }

  if (hoursListEveningElement) {
    hoursListEveningElement.innerHTML = '';
    hoursListEveningElement.appendChild(hoursEveningFragment);
  }

  if (hoursListElement) {
    hoursListElement.innerHTML = '';
    hoursListElement.appendChild(hoursFragment);
  }

  if (weekDaysListElement) {
    weekDaysListElement.innerHTML = '';
    weekDaysListElement.appendChild(weekDaysFragment);
  }

  if (mobNavElement) {
    mobNavElement.innerHTML = '';
    mobNavElement.appendChild(activeDayFragment);

    mobNavElement.append(btnFragment);
  }
}

const form = document.querySelector('.form-schedule');

form.addEventListener('submit', e => {
  e.preventDefault();

  schedule.classList.remove('schedule--empty');

  const btn = form
    .querySelector('[data-schedule="schedule"]')
    .getAttribute('data-schedule');

  document.getElementById(btn).scrollIntoView({
    behavior: 'smooth',
    inline: 'start',
  });
  createschedule();

  const scheduleBtn = document.querySelector('.schedule__button');
  const weekDays = document.querySelector('.week-days');
  const weekDaysItems = document.querySelectorAll('.week-days__item');
  const hoursItems = document.querySelectorAll('.hours__item');

  if (window.matchMedia('(max-width: 767px)').matches) {
    mobActiveDay(nowDayWeek);
  }

  mobWeekDays(weekDaysItems);

  if (scheduleBtn) {
    scheduleBtn.addEventListener('click', function(evt) {
      evt.preventDefault();

      mobMenuToogle();

      if (weekDays.classList.contains('week-days--open')) {
        mobWeekDays(weekDaysItems);
      }
    });
  }

  const activeHoursItem = hourText => {
    hoursItems.forEach(function(item) {
      if (item.innerText === hourText) {
        item.classList.add('hours__item--active');
      }
    });
  };

  function activeWeekDay(weekDayText) {
    weekDaysItems.forEach(function(item) {
      if (item.innerText === weekDayText) {
        item.classList.add('week-days__item--active');
        activeDay.classList.add('schedule__item-active--active');
      }
    });
  }

  function noActiveHoursItem(hourText) {
    hoursItems.forEach(function(item) {
      if (item.innerText === hourText) {
        item.classList.remove('hours__item--active');
      }
    });
  }

  function noActiveWeekDay(weekDayText) {
    weekDaysItems.forEach(function(item) {
      if (item.innerText === weekDayText) {
        item.classList.remove('week-days__item--active');
        activeDay.classList.remove('schedule__item-active--active');
      }
    });
  }

  const daysItems = document.querySelectorAll('.days__item');

  daysItems.forEach(function(item) {
    item.addEventListener('mouseover', function() {
      let hourText = item.getAttribute('data-hour');
      let weekDayText = item.parentElement.getAttribute('data-weekDay');

      activeHoursItem(hourText);

      activeWeekDay(weekDayText);

      item.classList.add('days__item--active');
    });

    item.addEventListener('mouseout', function() {
      let hourText = item.getAttribute('data-hour');
      let weekDayText = item.parentElement.getAttribute('data-weekDay');

      noActiveHoursItem(hourText);

      noActiveWeekDay(weekDayText);

      item.classList.remove('days__item--active');
    });
  });

  const popoverList = document.querySelectorAll('[data-bs-toggle="popover"]');
  const list = [...popoverList];

  list.map(el => {
    let opts = {
      html: true,
      animation: false,
      content: $('[data-name="popover-content"]'),
      container: 'body',
    };
    if (el.hasAttribute('data-bs-content-id')) {
      opts.content = document.getElementById(
        el.getAttribute('data-bs-content-id'),
      ).innerHTML;
      opts.html = true;
    }
    new bootstrap.Popover(el, opts);
  });

  const lessons = document.querySelectorAll('.lesson');
  [...lessons].map(lesson => {
    lesson.addEventListener('click', e => {
      e.preventDefault();
    });
  });
});

