(function () {
   // header scroll
   const body = document.body;
  //  const triggerMenu = document.querySelector(".page-header__btn-burger");

   const scrollUp = "scroll-up";
   const scrollDown = "scroll-down";
   let lastScroll = 0;

  //  triggerMenu.addEventListener("click", () => {
  //    body.classList.toggle("menu-open");
  //    triggerMenu.classList.toggle("active");
  //  });

   window.addEventListener("scroll", () => {
     const currentScroll = window.pageYOffset;
     if (currentScroll <= 0) {
       body.classList.remove(scrollUp);
       return;
     }

     if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) {
       // down
       body.classList.remove(scrollUp);
       body.classList.add(scrollDown);
     } else if (currentScroll < lastScroll && body.classList.contains(scrollDown)) {
       // up
       body.classList.remove(scrollDown);
       body.classList.add(scrollUp);
     }
     lastScroll = currentScroll;
   });
})()

// mob menu

export let mobileMenuToggle = () => {
  const page = document.querySelector('.page');
  const btnMenuOpen = document.querySelector('.page-header__btn-menu');
  const btnMenuOpenClose = document.querySelector('.mobile-menu__btn-close');
  const headerTop = document.querySelector('.page-header');
  const mobMenu = document.querySelector('.mobile-menu');

  if (btnMenuOpen) {
    btnMenuOpen.addEventListener('click', function() {
      headerTop.classList.add('page-header--mob');
      page.classList.add('page--overlay');
      mobMenu.classList.add('active');
    });
  }

  if (btnMenuOpenClose) {
    btnMenuOpenClose.addEventListener('click', function() {
      headerTop.classList.remove('page-header--mob');
      page.classList.remove('page--overlay');
      mobMenu.classList.remove('active');
    });
  }

  if (mobMenu) {
    mobMenu.addEventListener('click', () => {
      mobMenu.classList.remove('active');
    });
  }

  window.onresize = function() {
    if (window.screen.width > 768) {
      document.querySelector('.page').classList.remove('page--overlay');
      if (headerTop.classList.contains('page-header--mob')) {
        headerTop.classList.remove('page-header--mob');
      }
    }
  };
};



mobileMenuToggle();



(function() {
  const cities = [
    'Санкт-Петербург',
    'Нижний Новгород',
    'Казань',
    'Тольятти',
    'Самара',
    'Ульяновск',
    'Архангельск',
    'Ижевск',
    'Ярославль',
    'Петрозаводск',
    'Мурманск',
    'Рязань',
    'Набережные Челны',
    'Тула',
    'Нижнекамск',
  ];

  let listCity = cities.filter(item => item !== 'Санкт-Петербург');
  let sortCities = listCity.sort();
  sortCities.unshift('Санкт-Петербург');

  let items = [...document.querySelectorAll('.city-list li button')];
  let navItems = [...document.querySelectorAll('.nav-city__list li a')];

  for (let j = 0; j < sortCities.length; j++) {
    for (let i = 0; i < items.length; i++) {
      if (i == j) {
        items[i].innerText = sortCities[j];
      }
    }
    for (let i = 0; i < navItems.length; i++) {
      if (i == j) {
        navItems[i].innerText = sortCities[j];
      }
    }
  }

   let navCityToggle = () => {
    const city = document.querySelector('.nav-city__title');
    const cityName = document.querySelector('.nav-city__title span');
    const cityList = document.querySelector('.nav-city__wrapper');
    const cityListOpen = document.querySelector('.nav-city__wrapper.d-block');

    const toggleMenuCity = () => {
      cityList.classList.toggle('d-block');
      cityList.classList.toggle('d-none');
    };

    if (city) {
      city.addEventListener('click', evt => {
        evt.stopPropagation();
        toggleMenuCity();
      });
    }

    document.addEventListener('click', evt => {
      let target = evt.target;
      let its_menu = target == cityList || cityList.contains(target);
      let its_hamburger = target == city;
      let menu_is_active = cityList.classList.contains('d-block');

      if (!its_menu && !its_hamburger && menu_is_active) {
        toggleMenuCity();
      }
    });

    if (cityList) {
      cityList.addEventListener('click', evt => {
        evt.preventDefault();
        let target = evt.target.tagName;
        if (target == 'A') {
          let activeNameCity = evt.target.innerText;
          cityName.innerText = activeNameCity;
          toggleMenuCity();
        }
      });
    }

    if (cityListOpen) {
      console.log('open');
      page.addEventListener('click', () => {
        console.log(evt.target);
        toggleMenuCity();
      });
    }
  };

  document.addEventListener('DOMContentLoaded', navCityToggle);
})();

// ошибка на странице акций - на любой кроме главной

// modal tour
// const myModal = new bootstrap.Modal(
//   document.getElementById('exampleModalToggle'),
//   {},
// );

const btnModalOpen = document.querySelector('#modalToggle');

if (btnModalOpen) {
  // btnModalOpen.addEventListener('click', () => {
  //   if (myModal) {
  //     myModal.show();
  //   }
  // });

  // $(btnModalOpen).on('shown.bs.modal', function () {
  //   if (myModal) {
  //     myModal.show();
  //   }
  // })
}

const mainCity = document.querySelector('.definition-city');

if (mainCity) {
  mainCity.addEventListener('click', () => {
    mainCity.classList.add('d-none');
  })
}

(function() {
  const location = () => {
    const city = document.querySelector('.nav-city__title');
    // создание блока
    let page = document.querySelector('.page-body main');
    let box = document.createElement('div');
    let title = document.createElement('div');
    let btnYes = document.createElement('button');
    let btnNo = document.createElement('button');

    box.className = 'location';
    title.className = 'location__title';
    btnYes.className = 'button active';
    btnNo.className = 'button';
    title.innerText = 'Ваш город Санкт-Петербург?';
    btnYes.innerText = 'Да';
    btnNo.innerText = 'Нет';
    btnNo.setAttribute('data-bs-target', '#modalToggleCityChange');
    btnNo.setAttribute('data-bs-toggle', 'modal');
    btnNo.setAttribute('ddata-bs-dismiss', 'modal');
    box.append(title);
    box.appendChild(btnYes);
    box.appendChild(btnNo);

    setTimeout(() => {
      page.append(box);

      // выбор города
      const blockLocation = document.querySelector('.location');
      const activeCity = document.querySelector('.nav-city__title span');
      const listCity = document.querySelector('.city-list');

      if (blockLocation) {
        blockLocation.addEventListener('click', evt => {
          let target = evt.target;
          if (target.tagName == 'BUTTON' && target.innerText == 'Да') {
            activeCity.innerText = 'Санкт-Петербург';
            box.remove();
          } else {
            evt.target.previousElementSibling.classList.toggle('active')
            evt.target.classList.toggle('active');
            if (listCity) {
              listCity.addEventListener('click', evt => {
                let target = evt.target;
                target.classList.toggle('active');
                if (target.tagName == 'BUTTON') {
                  activeCity.innerText = target.innerText;
                  box.remove();
                }
              });
            }
          }
        });

        // если открыли список городов в меню
        if (city) {
          city.addEventListener('click', evt => {
            box.remove();
          });
        }
      }
    },);
  };

  document.addEventListener('DOMContentLoaded', location);
})();

// Example starter JavaScript for disabling form submissions if there are invalid fields
(function() {
  'use strict';

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  let forms = document.querySelectorAll('.needs-validation');
  let modalTour = document.querySelector('.modal-tour');
  let modalSubmitForm = document.getElementById('modal-submit-form');

  if (modalTour) {
    const modal = new bootstrap.Modal(modalTour);
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);

            modal.hide();
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  } else {
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  }

  // Loop over them and prevent submission
  // Array.prototype.slice.call(forms).forEach(function(form) {
  //   form.addEventListener(
  //     'submit',
  //     function(event) {
  //       if (!form.checkValidity()) {
  //         event.preventDefault();
  //         event.stopPropagation();
  //         form.classList.add('was-validated');
  //       } else {
  //         event.preventDefault();
  //         form.classList.remove('was-validated');
  //         const modalSubmit = new bootstrap.Modal(modalSubmitForm);

  //         if (modalTour) {
  //           let modal = new bootstrap.Modal(modalTour);
  //           modal.hide();
  //           modalSubmit.show();
  //         } else {
  //           modalSubmit.show();
  //         }

  //         modalSubmitForm.addEventListener('hidden.bs.modal', function() {
  //           form.submit();
  //           form.reset();
  //         });
  //       }
  //     },
  //     false,
  //   );
  // });

  // маска для телефона
  let phones = document.querySelectorAll('input[type="tel"]');
  phones.forEach(phone => {
    let maskOptions = {
      mask: '{8} (000)000-00-00',
      lazy: true,
      autofix: true, // bound value
      placeholderChar: '9',
    };
    new IMask(phone, maskOptions);
  });
})();


