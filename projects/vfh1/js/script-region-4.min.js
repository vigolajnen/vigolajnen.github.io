(function () {
   // header scroll
   const body = document.body;
  //  const triggerMenu = document.querySelector(".page-header__btn-burger");

   const scrollUp = "scroll-up";
   const scrollDown = "scroll-down";
   let lastScroll = 0;

  //  triggerMenu.addEventListener("click", () => {
  //    body.classList.toggle("menu-open");
  //    triggerMenu.classList.toggle("active");
  //  });

   window.addEventListener("scroll", () => {
     const currentScroll = window.pageYOffset;
     if (currentScroll <= 0) {
       body.classList.remove(scrollUp);
       return;
     }

     if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) {
       // down
       body.classList.remove(scrollUp);
       body.classList.add(scrollDown);
     } else if (currentScroll < lastScroll && body.classList.contains(scrollDown)) {
       // up
       body.classList.remove(scrollDown);
       body.classList.add(scrollUp);
     }
     lastScroll = currentScroll;
   });
})()

// mob menu

export let mobileMenuToggle = () => {
  const page = document.querySelector('.page');
  const btnMenuOpen = document.querySelector('.page-header__btn-menu');
  const btnMenuOpenClose = document.querySelector('.mobile-menu__btn-close');
  const headerTop = document.querySelector('.page-header');
  const mobMenu = document.querySelector('.mobile-menu');

  if (btnMenuOpen) {
    btnMenuOpen.addEventListener('click', function() {
      headerTop.classList.add('page-header--mob');
      page.classList.add('page--overlay');
      mobMenu.classList.add('active');
    });
  }

  if (btnMenuOpenClose) {
    btnMenuOpenClose.addEventListener('click', function() {
      headerTop.classList.remove('page-header--mob');
      page.classList.remove('page--overlay');
      mobMenu.classList.remove('active');
    });
  }

  if (mobMenu) {
    mobMenu.addEventListener('click', () => {
      mobMenu.classList.remove('active');
    });
  }

  window.onresize = function() {
    if (window.screen.width > 768) {
      document.querySelector('.page').classList.remove('page--overlay');
      if (headerTop.classList.contains('page-header--mob')) {
        headerTop.classList.remove('page-header--mob');
      }
    }
  };
};



mobileMenuToggle();



(function() {
  const cities = [
    'Санкт-Петербург',
    'Нижний Новгород',
    'Казань',
    'Тольятти',
    'Самара',
    'Ульяновск',
    'Архангельск',
    'Ижевск',
    'Ярославль',
    'Петрозаводск',
    'Мурманск',
    'Рязань',
    'Набережные Челны',
    'Тула',
    'Нижнекамск',
  ];

  let listCity = cities.filter(item => item !== 'Санкт-Петербург');
  let sortCities = listCity.sort();
  sortCities.unshift('Санкт-Петербург');

  let items = [...document.querySelectorAll('.city-list li button')];
  let navItems = [...document.querySelectorAll('.nav-city__list li a')];

  for (let j = 0; j < sortCities.length; j++) {
    for (let i = 0; i < items.length; i++) {
      if (i == j) {
        items[i].innerText = sortCities[j];
      }
    }
    for (let i = 0; i < navItems.length; i++) {
      if (i == j) {
        navItems[i].innerText = sortCities[j];
      }
    }
  }

   let navCityToggle = () => {
    const city = document.querySelector('.nav-city__title');
    const cityName = document.querySelector('.nav-city__title span');
    const cityList = document.querySelector('.nav-city__wrapper');
    const cityListOpen = document.querySelector('.nav-city__wrapper.d-block');

    const toggleMenuCity = () => {
      cityList.classList.toggle('d-block');
      cityList.classList.toggle('d-none');
    };

    if (city) {
      city.addEventListener('click', evt => {
        evt.stopPropagation();
        toggleMenuCity();
      });
    }

    document.addEventListener('click', evt => {
      let target = evt.target;
      let its_menu = target == cityList || cityList.contains(target);
      let its_hamburger = target == city;
      let menu_is_active = cityList.classList.contains('d-block');

      if (!its_menu && !its_hamburger && menu_is_active) {
        toggleMenuCity();
      }
    });

    if (cityList) {
      cityList.addEventListener('click', evt => {
        evt.preventDefault();
        let target = evt.target.tagName;
        if (target == 'A') {
          let activeNameCity = evt.target.innerText;
          cityName.innerText = activeNameCity;
          toggleMenuCity();
        }
      });
    }

    if (cityListOpen) {
      console.log('open');
      page.addEventListener('click', () => {
        console.log(evt.target);
        toggleMenuCity();
      });
    }
  };

  document.addEventListener('DOMContentLoaded', navCityToggle);
})();

// Example starter JavaScript for disabling form submissions if there are invalid fields
(function() {
  'use strict';

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  let forms = document.querySelectorAll('.needs-validation');
  let modalTour = document.querySelector('.modal-tour');
  let modalSubmitForm = document.getElementById('modal-submit-form');

  // document.addEventListener('DOMContentLoaded', () => {

  // });


  if (modalTour) {
    const modal = new bootstrap.Modal(modalTour);
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);

            modal.hide();
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  } else {
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  }


  // маска для телефона
  // let phones = document.querySelectorAll('input[type="tel"]');
  // phones.forEach(phone => {
  //   let maskOptions = {
  //     mask: '{8} (000)000-00-00',
  //     lazy: true,
  //     autofix: true, // bound value
  //     placeholderChar: '9',
  //   };
  //   new IMask(phone, maskOptions);
  // });
})();

// Пример реализации боковой панели на основе наследования от collection.Item.
// Боковая панель отображает информацию, которую мы ей передали.
ymaps.modules.define('Panel', ['util.augment', 'collection.Item'], function(
  provide,
  augment,
  item,
) {
  // Создаем собственный класс.
  var Panel = function(options) {
    Panel.superclass.constructor.call(this, options);
  };

  // И наследуем его от collection.Item.
  augment(Panel, item, {
    onAddToMap: function(map) {
      Panel.superclass.onAddToMap.call(this, map);
      this.getParent()
        .getChildElement(this)
        .then(this._onGetChildElement, this);
      // Добавим отступы на карту.
      // Отступы могут учитываться при установке текущей видимой области карты,
      // чтобы добиться наилучшего отображения данных на карте.
      map.margin.addArea({
        top: 0,
        right: 0,
        width: '645px',
        height: '100%',
      });
    },

    onRemoveFromMap: function(oldMap) {
      if (this._$control) {
        this._$control.remove();
      }
      Panel.superclass.onRemoveFromMap.call(this, oldMap);
    },

    _onGetChildElement: function(parentDomContainer) {
      // Создаем HTML-элемент с текстом.
      // По-умолчанию HTML-элемент скрыт.
      this._$control = $(
        '<div class="customControl"><div class="content"></div><div class="closeButton"></div></div>',
      ).appendTo(parentDomContainer);
      this._$content = $('.content');
      // При клике по крестику будем скрывать панель.
      $('.closeButton').on('click', this._onClose);
    },
    _onClose: function() {
      $('.customControl').css('display', 'none');
    },
    // Метод задания контента панели.
    setContent: function(text) {
      // При задании контента будем показывать панель.
      this._$control.css('display', 'flex');
      this._$content.html(text);
    },
  });

  provide(Panel);
});

const clubs = [
  {
    id: 1,
    organizationID: '238470869064',
    cityTitle: 'Самара',
    title: 'Гудок',
    metro: ['Нет метро'],
    address: 'ул. Красноармейская, д. 131, ТК Гудок',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '1Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.1870108430115,50.128152548591444],
    poster: 'img/club/preview/9.jpg',
    href: 'club.html',
  },
  {
    id: 2,
    organizationID: '81306420845',
    cityTitle: 'Самара',
    title: 'Амбар',
    metro: ['Нет метро'],
    address: 'ТК “Амбар” Южное ш., д., 5',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '2Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.14038,50.173675],
    poster: 'img/club/preview/7.jpg',
    href: 'club.html',
  },
  {
    id: 3,
    organizationID: '90294133913',
    cityTitle: 'Самара',
    title: 'Монте Роза',
    metro: ['Нет метро'],
    address: 'Московское ш., д., 4, к.4, СДЦ "Монте Роза"',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '3Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.204226618761474,50.148408591073824],
    poster: 'img/club/preview/10.jpg',
    href: 'club.html',
  },
  {
    id: 4,
    organizationID: '43935049627',
    cityTitle: 'Самара',
    title: 'Шипка',
    metro: ['Нет метро'],
    address: 'ул. Стара Загора д., 58',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '3Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.230887043599246,50.20891922645178],
    poster: 'img/club/preview/8.jpg',
    href: 'club.html',
  },
];


const ymapsTouchScroll = (map, { preventScroll = true, preventTouch = true, textScroll = "Чтобы изменить масштаб, прокручивайте карту, удерживая клавишу Ctrl", textTouch = "Чтобы переместить карту проведите по ней двумя пальцами", } = {}) => {
  if (typeof window === "undefined" ||
      typeof map !== "object" ||
      (!preventScroll && !preventTouch))
      return;
  const eventsPane = map.panes.get("events");
  if (!eventsPane)
      return;
  const eventsPaneEl = eventsPane.getElement();
  const isTouch = /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent);
  const text = isTouch ? textTouch : textScroll;
  const styles = {
      alignItems: "center",
      boxSizing: "border-box",
      color: "#fff",
      display: "flex",
      justifyContent: "center",
      padding: "40px",
      textAlign: "center",
      transition: "background .2s",
      touchAction: "auto",
  };
  Object.keys(styles).forEach((key) => {
      const name = key;
      eventsPaneEl.style[name] = styles[name];
  });
  const hintToggle = (fl) => {
      eventsPaneEl.style.background = `rgba(0, 0, 0, ${fl ? ".6" : "0"})`;
      eventsPaneEl.textContent = fl ? text : "";
  };
  if (preventTouch && isTouch) {
      map.behaviors.disable("drag");
      eventsPaneEl.addEventListener("touchstart", (e) => {
          hintToggle(e.touches.length === 1);
      });
      eventsPaneEl.addEventListener("touchend", (e) => {
          hintToggle(false);
      });
  }
  if (preventScroll && !isTouch) {
      const scrollToggle = (fl) => {
          map.behaviors[fl ? "enable" : "disable"]("scrollZoom");
      };
      let isMouseEnter = false;
      let isCtrlPress = false;
      scrollToggle(false);
      eventsPane.events.add("wheel", () => {
          if (!isMouseEnter)
              return;
          scrollToggle(isCtrlPress);
          hintToggle(!isCtrlPress);
      });
      eventsPane.events.add("mousedown", () => {
          hintToggle(false);
      });
      eventsPane.events.add("mouseenter", () => {
          isMouseEnter = true;
      });
      eventsPane.events.add("mouseleave", () => {
          isMouseEnter = false;
          hintToggle(false);
      });
      document.addEventListener("keydown", (e) => {
          isCtrlPress = e.ctrlKey;
          if (isCtrlPress)
              hintToggle(false);
      });
      document.addEventListener("keyup", () => {
          isCtrlPress = false;
      });
  }
};
export default ymapsTouchScroll;


ymaps.ready(['Panel']).then(function() {
  var map = new ymaps.Map('map', {
    center: [53.195878, 50.100202],
    zoom: 11,
    controls: ['zoomControl'],
  });

  ymapsTouchScroll(map);

  // Создадим контент для меток.
  
  var createPrevieClub = club => {
    return (
      `
      <section class="card-club card-club--map">
      <div class="card-club__header">
        <div class="card-club__title-and-raiting">
          <div class="card-club__title">` + club.cityTitle + ` `+ `<span>` + club.title + `</span>` + `</div>
          <div class="card-club__raiting">
            <iframe src="https://yandex.ru/sprav/widget/rating-badge/` + club.organizationID + `" width="150" height="50" frameborder="0"></iframe>
          </div>
        </div>
        <div class="card-club__address">` + club.address + `</div>
        <div class="card-club__working working-hours">
          <div class="working-hours__club">
            <div class="working-hours__club-label">ПН-ПТ<span>07:00–23:00</span></div>
            <div class="working-hours__club-label">СБ-ВС<span>08:00–22:00</span></div>
          </div>
        </div>
      </div><a class="card-club__pic" ><img src=` + club.poster + ` width="666" height="228px" alt="фитнес-клуб с&nbsp;большим бассейном"></a>
      <div class="card-club__text">` + club.text + `</div>
      <div class="card-club__footer">
        <a class="link-icon link-icon--more" href=` + club.href + `>
          <span>О клубе</span>
          <svg class="icon" width="34" height="8" viewBox="0 0 34 8">
            <use xlink:href="img/sprite.svg#arrow"></use>
          </svg>
        </a>
        <a class="link-icon link-icon--more link-icon--bold" href="#modalPresale" data-bs-toggle="modal" data-bs-dismiss="modal">
          <span>Подобрать абонемент</span>
          <svg class="icon" width="34" height="8" viewBox="0 0 34 8">
            <use xlink:href="img/sprite.svg#arrow"></use>
          </svg>
        </a>
      </div>
    </section>
    `
    );
  };
  

  let modal = new bootstrap.Modal(document.querySelector('#modal-preview-club'));
  
  // Создадим и добавим панель на карту.
  var panel = new ymaps.Panel();
  map.controls.add(panel, {
    float: 'right',
  });
  
  // Создадим коллекцию геообъектов.
  var collection = new ymaps.GeoObjectCollection(null, {
    // Запретим появление балуна.
    hasBalloon: false,
    iconLayout: 'default#image',
    iconImageHref: 'img/icons/map-pin.svg',
    iconImageSize: [30, 42],
    iconImageOffset: [-5, -38],
  });
  // Добавим геообъекты в коллекцию.
  for (var i = 0; i < clubs.length; i++) {
    let myPlacemark = new ymaps.Placemark(clubs[i].center, {
      balloonContent: createPrevieClub(clubs[i]),
      iconImageHref: 'img/icons/map-pin.svg',
    });
    collection.add(myPlacemark);
  }
  
  // Добавим коллекцию на карту.
  map.geoObjects.add(collection);
  // Подпишемся на событие клика по коллекции.
  collection.events.add('click', function(e) {
    // Получим ссылку на геообъект, по которому кликнул пользователь.
    var target = e.get('target');
  
  
    // -----------------------------
    // вывод данных клуба в модальное окно
    let activeClub = clubs.find(
      item => item.center == target.geometry._coordinates,
    );
    let modalBody = document.querySelector('.modal-preview-club .modal-body');
    let modalBaseContent = document.querySelector('.modal-body div');
  
    let div = document.createElement('div');
    div.innerHTML = createPrevieClub(activeClub);
    modalBody.removeChild(modalBaseContent);
    modalBody.append(div);
    // ---------------------
  
    collection.each(function(map) {
      map.options.set({
        iconImageHref: 'img/icons/map-pin.svg',
      });
    });
  
    target.options.set({ iconImageHref: 'img/icons/map-pin-active.svg' });
  
    if (window.matchMedia('(min-width: 768px)').matches) {
      modal.hide();
      // Зададим контент боковой панели.
      panel.setContent(target.properties.get('balloonContent'));
      // Переместим центр карты по координатам метки с учётом заданных отступов.
      map.panTo(target.geometry.getCoordinates(), { useMapMargin: true });
    } else {
      if (modal) {
        document.querySelector('.customControl').style.display = 'none';
        modal.show();
      }
    }
  
    // window.addEventListener('resize', function(e) {
    //   if (window.matchMedia('(min-width: 768px)').matches) {
    //     // modal.hide();
    //     // Зададим контент боковой панели.
    //     panel.setContent(target.properties.get('balloonContent'));
    //     // Переместим центр карты по координатам метки с учётом заданных отступов.
    //     map.panTo(target.geometry.getCoordinates(), { useMapMargin: true });
    //   } else {
    //     if (modal) {
    //       // document.querySelector('.customControl').style.display = 'none';
    //       modal.show();
    //     }
    //   }
    // });
  });
  
});

