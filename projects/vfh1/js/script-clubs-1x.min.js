(function () {
   // header scroll
   const body = document.body;
  //  const triggerMenu = document.querySelector(".page-header__btn-burger");

   const scrollUp = "scroll-up";
   const scrollDown = "scroll-down";
   let lastScroll = 0;

  //  triggerMenu.addEventListener("click", () => {
  //    body.classList.toggle("menu-open");
  //    triggerMenu.classList.toggle("active");
  //  });

   window.addEventListener("scroll", () => {
     const currentScroll = window.pageYOffset;
     if (currentScroll <= 0) {
       body.classList.remove(scrollUp);
       return;
     }

     if (currentScroll > lastScroll && !body.classList.contains(scrollDown)) {
       // down
       body.classList.remove(scrollUp);
       body.classList.add(scrollDown);
     } else if (currentScroll < lastScroll && body.classList.contains(scrollDown)) {
       // up
       body.classList.remove(scrollDown);
       body.classList.add(scrollUp);
     }
     lastScroll = currentScroll;
   });
})()

// mob menu

export let mobileMenuToggle = () => {
  const page = document.querySelector('.page');
  const btnMenuOpen = document.querySelector('.page-header__btn-menu');
  const btnMenuOpenClose = document.querySelector('.mobile-menu__btn-close');
  const headerTop = document.querySelector('.page-header');
  const mobMenu = document.querySelector('.mobile-menu');

  if (btnMenuOpen) {
    btnMenuOpen.addEventListener('click', function() {
      headerTop.classList.add('page-header--mob');
      page.classList.add('page--overlay');
      mobMenu.classList.add('active');
    });
  }

  if (btnMenuOpenClose) {
    btnMenuOpenClose.addEventListener('click', function() {
      headerTop.classList.remove('page-header--mob');
      page.classList.remove('page--overlay');
      mobMenu.classList.remove('active');
    });
  }

  if (mobMenu) {
    mobMenu.addEventListener('click', () => {
      mobMenu.classList.remove('active');
    });
  }

  window.onresize = function() {
    if (window.screen.width > 768) {
      document.querySelector('.page').classList.remove('page--overlay');
      if (headerTop.classList.contains('page-header--mob')) {
        headerTop.classList.remove('page-header--mob');
      }
    }
  };
};



mobileMenuToggle();



(function() {
  const cities = [
    'Санкт-Петербург',
    'Нижний Новгород',
    'Казань',
    'Тольятти',
    'Самара',
    'Ульяновск',
    'Архангельск',
    'Ижевск',
    'Ярославль',
    'Петрозаводск',
    'Мурманск',
    'Рязань',
    'Набережные Челны',
    'Тула',
    'Нижнекамск',
  ];

  let listCity = cities.filter(item => item !== 'Санкт-Петербург');
  let sortCities = listCity.sort();
  sortCities.unshift('Санкт-Петербург');

  let items = [...document.querySelectorAll('.city-list li button')];
  let navItems = [...document.querySelectorAll('.nav-city__list li a')];

  for (let j = 0; j < sortCities.length; j++) {
    for (let i = 0; i < items.length; i++) {
      if (i == j) {
        items[i].innerText = sortCities[j];
      }
    }
    for (let i = 0; i < navItems.length; i++) {
      if (i == j) {
        navItems[i].innerText = sortCities[j];
      }
    }
  }

   let navCityToggle = () => {
    const city = document.querySelector('.nav-city__title');
    const cityName = document.querySelector('.nav-city__title span');
    const cityList = document.querySelector('.nav-city__wrapper');
    const cityListOpen = document.querySelector('.nav-city__wrapper.d-block');

    const toggleMenuCity = () => {
      cityList.classList.toggle('d-block');
      cityList.classList.toggle('d-none');
    };

    if (city) {
      city.addEventListener('click', evt => {
        evt.stopPropagation();
        toggleMenuCity();
      });
    }

    document.addEventListener('click', evt => {
      let target = evt.target;
      let its_menu = target == cityList || cityList.contains(target);
      let its_hamburger = target == city;
      let menu_is_active = cityList.classList.contains('d-block');

      if (!its_menu && !its_hamburger && menu_is_active) {
        toggleMenuCity();
      }
    });

    if (cityList) {
      cityList.addEventListener('click', evt => {
        evt.preventDefault();
        let target = evt.target.tagName;
        if (target == 'A') {
          let activeNameCity = evt.target.innerText;
          cityName.innerText = activeNameCity;
          toggleMenuCity();
        }
      });
    }

    if (cityListOpen) {
      console.log('open');
      page.addEventListener('click', () => {
        console.log(evt.target);
        toggleMenuCity();
      });
    }
  };

  document.addEventListener('DOMContentLoaded', navCityToggle);
})();


// Пример реализации боковой панели на основе наследования от collection.Item.
// Боковая панель отображает информацию, которую мы ей передали.
ymaps.modules.define('Panel', ['util.augment', 'collection.Item'], function(
  provide,
  augment,
  item,
) {
  // Создаем собственный класс.
  var Panel = function(options) {
    Panel.superclass.constructor.call(this, options);
  };

  // И наследуем его от collection.Item.
  augment(Panel, item, {
    onAddToMap: function(map) {
      Panel.superclass.onAddToMap.call(this, map);
      this.getParent()
        .getChildElement(this)
        .then(this._onGetChildElement, this);
      // Добавим отступы на карту.
      // Отступы могут учитываться при установке текущей видимой области карты,
      // чтобы добиться наилучшего отображения данных на карте.
      map.margin.addArea({
        top: 0,
        right: 0,
        width: '645px',
        height: '100%',
      });
    },

    onRemoveFromMap: function(oldMap) {
      if (this._$control) {
        this._$control.remove();
      }
      Panel.superclass.onRemoveFromMap.call(this, oldMap);
    },

    _onGetChildElement: function(parentDomContainer) {
      // Создаем HTML-элемент с текстом.
      // По-умолчанию HTML-элемент скрыт.
      this._$control = $(
        '<div class="customControl"><div class="content"></div><div class="closeButton"></div></div>',
      ).appendTo(parentDomContainer);
      this._$content = $('.content');
      // При клике по крестику будем скрывать панель.
      $('.closeButton').on('click', this._onClose);
    },
    _onClose: function() {
      $('.customControl').css('display', 'none');
    },
    // Метод задания контента панели.
    setContent: function(text) {
      // При задании контента будем показывать панель.
      this._$control.css('display', 'flex');
      this._$content.html(text);
    },
  });

  provide(Panel);
});

const clubs = [
  {
    id: 1,
    organizationID: '17717319556',
    title: 'Ижевск Матрица Молл',
    metro: ['Нет метро'],
    address: 'ул. Баранова, 87',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '1Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [56.83304767657113,53.124881672054705],
    poster: 'img/club/preview/1.jpg',
    href: 'club.html',
  },
  {
    id: 2,
    organizationID: '12904899621',
    title: 'Ижевск 10 лет Октября',
    metro: ['Нет метро'],
    address: 'Ижевск, ул. 10 лет Октября, 17А',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '2Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [56.87297259652959,53.21500389495365],
    poster: 'img/club/preview/1.jpg',
    href: 'club.html',
  },
  {
    id: 3,
    organizationID: '176981142142',
    title: 'Ижевск Молодежная',
    metro: ['Нет метро'],
    address: 'Ижевск, ул. Молодежная, 107 Б',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '3Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [56.8541604342875,53.294150518566504],
    poster: 'img/club/preview/1.jpg',
    href: 'club.html',
  },
];



const listMetro = [
  'Адмиралтейская',
  'Академическая',
  'Беговая',
  'Бухарестская',
  'Василеостровская',
  'Выборгская',
  'Гражданский проспект',
  'Девяткино',
  'Достоевская',
  'Звёздная',
  'Кировский завод',
  'Комендантский проспект',
  'Крестовский остров',
  'Купчино',
  'Ладожская',
  'Ленинский проспект',
  'Лесная',
  'Международная',
  'Московская',
  'Новочеркасская',
  'Озерки',
  'Пионерская',
  'Приморская',
  'Проспект Большевиков',
  'Проспект Ветеранов',
  'Проспект Просвещения',
  'Рыбацкое',
  'Старая деревня',
  'Удельная',
  'Улица Дыбенко',
  'Чкаловская',
  'Чёрная речка',
  'Нет метро',
];


ymaps.ready(['Panel']).then(function() {
  var map = new ymaps.Map('map', {
    center: [56.852676, 53.206900],
    zoom: 12,
    controls: ['zoomControl'],
  });

  // Создадим контент для меток.
  var createPrevieClub = club => {
    return (
      `
        <section class="club-preview">
        <div class="club-preview__header">
          <div class="club-preview__contacts">
            <div class="title">` +
      club.title +
      `</div>
            <div class="raiting">
            <iframe src="https://yandex.ru/sprav/widget/rating-badge/` +
      club.organizationID +
      `" width="150" height="50" frameborder="0"></iframe>
            </div>
            <div class="club-preview__address">` +
      club.address +
      `</div>
          </div>
          <div class="club-preview__working working-hours">
                          <div class="working-hours__club"><span>ПН-ПТ 07:00–23:00</span><span>СБ-ВС 08:00–22:00</span></div>
                        </div>
        </div>
        <div class="club-preview__body">
          <div class="club-preview__pic"><img src="` +
      club.poster +
      `" width="666" height="228px" alt="фитнес-клуб с&nbsp;большим бассейном"></div>
          <div class="club-preview__text">` +
      club.text +
      `</div>
        </div>
        <div class="club-preview__footer"><a class="link-text link-text--more" href="#modalToggle" data-bs-toggle="modal" data-toggle="modal"><span>Подобрать абонемент</span>
                      <svg class="icon" width="34" height="8" viewBox="0 0 34 8">
                        <use xlink:href="img/sprite.svg#arrow"></use>
                      </svg></a><a class="link-text link-text--more" href=` +
      club.href +
      `><span>О клубе</span>
                      <svg class="icon" width="34" height="8" viewBox="0 0 34 8">
                        <use xlink:href="img/sprite.svg#arrow"></use>
                      </svg></a></div>
      </section>
    `
    );
  };

  // Создадим и добавим панель на карту.
  var panel = new ymaps.Panel();
  map.controls.add(panel, {
    float: 'right',
  });
  // Создадим коллекцию геообъектов.
  var collection = new ymaps.GeoObjectCollection(null, {
    // Запретим появление балуна.
    hasBalloon: false,
    iconLayout: 'default#image',
    iconImageHref: 'img/icons/map-pin.svg',
    iconImageSize: [30, 42],
    iconImageOffset: [-5, -38],
  });
  // Добавим геообъекты в коллекцию.
  for (var i = 0; i < clubs.length; i++) {
    let myPlacemark = new ymaps.Placemark(clubs[i].center, {
      balloonContent: createPrevieClub(clubs[i]),
      iconImageHref: 'img/icons/map-pin.svg',
    });
    collection.add(myPlacemark);
  }

  // Добавим коллекцию на карту.
  map.geoObjects.add(collection);
  // Подпишемся на событие клика по коллекции.
  collection.events.add('click', function(e) {
    // document.querySelector('.sidebar-clubs').classList.remove('show');
    // Получим ссылку на геообъект, по которому кликнул пользователь.
    var target = e.get('target');

    target.options.set({ iconImageHref: 'img/icons/map-pin-active.svg' });

    // Зададим контент боковой панели.
    panel.setContent(target.properties.get('balloonContent'));
    // Переместим центр карты по координатам метки с учётом заданных отступов.
    map.panTo(target.geometry.getCoordinates(), { useMapMargin: true });
  });

  map.behaviors.disable('scrollZoom');
});

