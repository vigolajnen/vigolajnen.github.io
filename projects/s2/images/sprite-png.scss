// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$circle-name: 'circle';
$circle-x: 701px;
$circle-y: 0px;
$circle-offset-x: -701px;
$circle-offset-y: 0px;
$circle-width: 454px;
$circle-height: 454px;
$circle-total-width: 4338px;
$circle-total-height: 1354px;
$circle-image: '../images/sprite-png.png';
$circle: (701px, 0px, -701px, 0px, 454px, 454px, 4338px, 1354px, '../images/sprite-png.png', 'circle', );
$ellipse2-name: 'ellipse2';
$ellipse2-x: 257px;
$ellipse2-y: 0px;
$ellipse2-offset-x: -257px;
$ellipse2-offset-y: 0px;
$ellipse2-width: 424px;
$ellipse2-height: 424px;
$ellipse2-total-width: 4338px;
$ellipse2-total-height: 1354px;
$ellipse2-image: '../images/sprite-png.png';
$ellipse2: (257px, 0px, -257px, 0px, 424px, 424px, 4338px, 1354px, '../images/sprite-png.png', 'ellipse2', );
$men-name: 'men';
$men-x: 2780px;
$men-y: 0px;
$men-offset-x: -2780px;
$men-offset-y: 0px;
$men-width: 764px;
$men-height: 696px;
$men-total-width: 4338px;
$men-total-height: 1354px;
$men-image: '../images/sprite-png.png';
$men: (2780px, 0px, -2780px, 0px, 764px, 696px, 4338px, 1354px, '../images/sprite-png.png', 'men', );
$p04-name: 'p04';
$p04-x: 2200px;
$p04-y: 0px;
$p04-offset-x: -2200px;
$p04-offset-y: 0px;
$p04-width: 560px;
$p04-height: 373px;
$p04-total-width: 4338px;
$p04-total-height: 1354px;
$p04-image: '../images/sprite-png.png';
$p04: (2200px, 0px, -2200px, 0px, 560px, 373px, 4338px, 1354px, '../images/sprite-png.png', 'p04', );
$profit-ellipse-name: 'profit-ellipse';
$profit-ellipse-x: 3564px;
$profit-ellipse-y: 0px;
$profit-ellipse-offset-x: -3564px;
$profit-ellipse-offset-y: 0px;
$profit-ellipse-width: 774px;
$profit-ellipse-height: 1354px;
$profit-ellipse-total-width: 4338px;
$profit-ellipse-total-height: 1354px;
$profit-ellipse-image: '../images/sprite-png.png';
$profit-ellipse: (3564px, 0px, -3564px, 0px, 774px, 1354px, 4338px, 1354px, '../images/sprite-png.png', 'profit-ellipse', );
$profit-ellipse2-name: 'profit-ellipse2';
$profit-ellipse2-x: 0px;
$profit-ellipse2-y: 0px;
$profit-ellipse2-offset-x: 0px;
$profit-ellipse2-offset-y: 0px;
$profit-ellipse2-width: 237px;
$profit-ellipse2-height: 237px;
$profit-ellipse2-total-width: 4338px;
$profit-ellipse2-total-height: 1354px;
$profit-ellipse2-image: '../images/sprite-png.png';
$profit-ellipse2: (0px, 0px, 0px, 0px, 237px, 237px, 4338px, 1354px, '../images/sprite-png.png', 'profit-ellipse2', );
$profit-ellipse3-name: 'profit-ellipse3';
$profit-ellipse3-x: 1175px;
$profit-ellipse3-y: 0px;
$profit-ellipse3-offset-x: -1175px;
$profit-ellipse3-offset-y: 0px;
$profit-ellipse3-width: 480px;
$profit-ellipse3-height: 480px;
$profit-ellipse3-total-width: 4338px;
$profit-ellipse3-total-height: 1354px;
$profit-ellipse3-image: '../images/sprite-png.png';
$profit-ellipse3: (1175px, 0px, -1175px, 0px, 480px, 480px, 4338px, 1354px, '../images/sprite-png.png', 'profit-ellipse3', );
$woman-name: 'woman';
$woman-x: 1675px;
$woman-y: 0px;
$woman-offset-x: -1675px;
$woman-offset-y: 0px;
$woman-width: 505px;
$woman-height: 761px;
$woman-total-width: 4338px;
$woman-total-height: 1354px;
$woman-image: '../images/sprite-png.png';
$woman: (1675px, 0px, -1675px, 0px, 505px, 761px, 4338px, 1354px, '../images/sprite-png.png', 'woman', );
$spritesheet-width: 4338px;
$spritesheet-height: 1354px;
$spritesheet-image: '../images/sprite-png.png';
$spritesheet-sprites: ($circle, $ellipse2, $men, $p04, $profit-ellipse, $profit-ellipse2, $profit-ellipse3, $woman, );
$spritesheet: (4338px, 1354px, '../images/sprite-png.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
