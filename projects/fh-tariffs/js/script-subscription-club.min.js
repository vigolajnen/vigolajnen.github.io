// Example starter JavaScript for disabling form submissions if there are invalid fields
(function() {
  'use strict';

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  let forms = document.querySelectorAll('.needs-validation');
  let modalTour = document.querySelector('.modal-tour');
  let modalSubmitForm = document.getElementById('modal-submit-form');

  // document.addEventListener('DOMContentLoaded', () => {

  // });


  if (modalTour) {
    const modal = new bootstrap.Modal(modalTour);
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);

            modal.hide();
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  } else {
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  }


  // маска для телефона
  // let phones = document.querySelectorAll('input[type="tel"]');
  // phones.forEach(phone => {
  //   let maskOptions = {
  //     mask: '{8} (000)000-00-00',
  //     lazy: true,
  //     autofix: true, // bound value
  //     placeholderChar: '9',
  //   };
  //   new IMask(phone, maskOptions);
  // });
})();


(function() {
  // Объединённая инициализация тултипов
  const initTooltips = (selector, customClass) => {
    return [].slice
      .call(document.querySelectorAll(`[data-bs-toggle="${selector}"]`))
      .map(
        el =>
          new bootstrap.Tooltip(el, {
            customClass: customClass,
            delay: { show: 100, hide: 50 },
          }),
      );
  };

  // // Инициализируем все тултипы
  // const tariffTooltips = initTooltips('tariff-tooltip', 'tariff-tooltip');
  // const tradeInTooltips = initTooltips('trade-in-tooltip', 'trade-in-tooltip');
  // const advantagesTooltips = initTooltips(
  //   'advantages-tooltip',
  //   'advantages-tooltip',
  // );

  (function() {
    // Данные для фонов (только градиенты и цвета)
    const backgroundData = {
      bg_1: {
        gradient: 'linear-gradient(135deg, #585858 0%, #585858 100%)',
        color: '#fff',
      },
      bg_2: {
        gradient: 'linear-gradient(135deg, #226B9E 0%, #226B9E 100%)',
        color: '#fff',
      },
      bg_3: {
        gradient: 'linear-gradient(135deg, #45281D 0%, #45281D 100%)',
        color: '#fff',
      },
      bg_4: {
        gradient: 'linear-gradient(135deg, #3B3230 0%, #3B3230 100%)',
        color: '#fff',
      },
      bg_5: {
        gradient: 'linear-gradient(135deg, #DBDAD8 0%, #DBDAD8 100%)',
        color: '#4b5052',
      },
      bg_6: {
        gradient: 'linear-gradient(135deg, #522F20 0%, #522F20 100%)',
        color: '#fff',
      },
      bg_7: {
        gradient: 'linear-gradient(135deg, #585858 0%, #585858 100%)',
        color: '#fff',
      },
    };

    // Обновленная функция для скролла к форме и передачи данных
  function scrollToForm(tariffName, tariffPrice) {
    const formSection = document.getElementById('feedbackForm');
    if (formSection) {
      // Плавный скролл к форме
      formSection.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });

      // Передаем данные тарифа в форму
      setTimeout(() => {
        // Находим поля в форме
        const tariffNameField = document.querySelector('#tariff-name');
        const tariffPriceField = document.querySelector('#tariff-price');
        const selectedTariffText = document.querySelector('#selected-tariff-text');
        const selectedTariffInfo = document.querySelector('.selected-tariff-info');

        if (tariffNameField) {
          tariffNameField.value = tariffName;
        }
        if (tariffPriceField) {
          tariffPriceField.value = tariffPrice;
        }
        if (selectedTariffText) {
          selectedTariffText.textContent = `${tariffName} - ${tariffPrice} ₽/мес`;
        }
        if (selectedTariffInfo) {
          selectedTariffInfo.style.display = 'block';
        }

        console.log(`Выбран тариф: ${tariffName}, цена: ${tariffPrice} ₽/мес`);
      }, 500);
    } else {
      console.warn('Форма обратной связи не найдена');
    }
  }

    // Функция для обновления фона тарифов
    // Функция для обновления фона и цвета текста тарифов
    function updateTariffsBackground(slide) {
      const tariffsSection = document.getElementById('tariffsSection');
      const gallerySection = document.getElementById('js-slider-gallery');
      console.log('Updating background and text color for:', slide);

      // Обновляем фон и цвет текста
      if (backgroundData[slide] && tariffsSection) {
        tariffsSection.style.background = backgroundData[slide].gradient;

        // Добавляем data-атрибут с цветом текста
        tariffsSection.setAttribute('style', `--bg-color: ${backgroundData[slide].gradient};--text-color: ${backgroundData[slide].color}`);
        gallerySection.setAttribute('style', `--bg-color: ${backgroundData[slide].gradient};--text-color: ${backgroundData[slide].color}`);
      }

      // Подсвечиваем активный тариф
      const allTariffs = document.querySelectorAll('.club-tariff');
      allTariffs.forEach(tariff => {
        tariff.style.transform = 'scale(1)';
        tariff.style.boxShadow = '0 2px 15px rgba(0, 0, 0, 0.1)';
      });

      const activeTariff = document.querySelector(`[data-tariff="${slide}"]`);
      if (activeTariff) {
        activeTariff.style.transform = 'scale(1.05)';
        activeTariff.style.boxShadow = '0 10px 30px rgba(0, 0, 0, 0.2)';
      }
    }

    // Инициализация слайдеров
    const sliderElement = document.querySelector(
      '#js-slider-gallery .swiper-container',
    );
    const tariffsSliderElement = document.querySelector(
      '#js-slider-tariffs .swiper-container',
    );

    let sliderGallery, sliderTariffs;

    // Основной слайдер с картинками
    if (sliderElement) {
      sliderGallery = new Swiper('#js-slider-gallery .swiper-container', {
        slidesPerView: 1,
        loop: true,
        pagination: {
          el: '.page-tariffs__club-gallery .swiper-pagination',
          clickable: true,
        },
        navigation: {
          nextEl: '.page-tariffs__club-gallery .swiper-button-next',
          prevEl: '.page-tariffs__club-gallery .swiper-button-prev',
        },
        on: {
          slideChange: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-slide');
            updateTariffsBackground(slide);
          },
          init: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-slide');
            updateTariffsBackground(slide);
          },
        },
      });
    }

    // Слайдер тарифов БЕЗ loop
    if (tariffsSliderElement) {
      sliderTariffs = new Swiper('#js-slider-tariffs .swiper-container', {
        slidesPerView: 1.2,
        spaceBetween: 5,
        loop: false,
        watchOverflow: true,
        pagination: {
          el: '.club-tariffs .swiper-pagination',
          clickable: true,
        },
        navigation: {
          nextEl: '.club-tariffs .swiper-button-next',
          prevEl: '.club-tariffs .swiper-button-prev',
        },
        breakpoints: {
          // Мобилки до 567px - 1 слайд
          567: {
            slidesPerView: 2.3,
            spaceBetween: 5,
          },
          // Планшеты 768px - 2.5 слайда (2 с половиной)
          768: {
            slidesPerView: 2.5,
            spaceBetween: 10,
          },
          // Десктоп 1024px - 3 слайда
          1024: {
            slidesPerView: 2.7,
            spaceBetween: 10,
          },
          // Большие экраны 1200px - 4 слайда
          1200: {
            slidesPerView: 4,
            spaceBetween: 10,
          },
        },
        on: {
          slideChange: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-tariff');

            if (!slide) {
              console.error('data-tariff attribute not found in slide');
              return;
            }

            console.log('Tariffs slider changed to:', slide);
          },
          init: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-tariff');

            if (!slide) {
              console.error(
                'data-tariff attribute not found in slide during init',
              );
              return;
            }

            console.log('Tariffs init:', slide);
          },
        },
      });

      // Обработчик клика по кнопке "Выбрать" в тарифе
      document.querySelectorAll('.club-tariff__link').forEach(button => {
        button.addEventListener('click', e => {
          e.preventDefault();
          console.log('Select button clicked');

          // Скроллим к форме и передаем данные из data-атрибутов
          scrollToForm(button);
        });
      });

      // Обработчик клика по самому тарифу (для переключения слайдеров)
      document.querySelectorAll('.club-tariff').forEach(tariff => {
        tariff.addEventListener('click', e => {
          // Проверяем, что клик не по кнопке "Выбрать"
          if (!e.target.closest('.club-tariff__link')) {
            const slide = tariff.getAttribute('data-tariff');
            console.log('Tariff clicked:', slide);

            // Переключаем слайдер тарифов
            if (sliderTariffs) {
              const index = Array.from(sliderTariffs.slides).indexOf(tariff);
              if (index !== -1) {
                sliderTariffs.slideTo(index);
              }
            }

            // Переключаем основной слайдер (чтобы синхронизировать и поменять фон)
            if (sliderGallery) {
              const index = Array.from(sliderTariffs.slides).indexOf(tariff);
              if (index !== -1) {
                sliderGallery.slideTo(index);
              }
            }
          }
        });
      });
    }

    // Функция для проверки видимости всех тарифов
    function checkTariffsVisibility() {
      if (!sliderTariffs) return;

      const tariffsContainer = document.querySelector('#js-slider-tariffs');
      const totalSlides = sliderTariffs.slides.length;
      const slidesPerView = sliderTariffs.params.slidesPerView;

      // Если все слайды видны, скрываем навигацию
      if (totalSlides <= slidesPerView) {
        tariffsContainer.classList.add('all-visible');
      } else {
        tariffsContainer.classList.remove('all-visible');
      }
    }

    // Вызываем при ресайзе
    if (sliderTariffs) {
      sliderTariffs.on('resize', checkTariffsVisibility);
      sliderTariffs.on('init', checkTariffsVisibility);
    }

    // Также вызываем при загрузке
    window.addEventListener('load', checkTariffsVisibility);
  })();
})();

document.addEventListener("DOMContentLoaded", function() {
  const lazyFrames = document.querySelectorAll('iframe.lazy-iframe');

  const frameObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const iframe = entry.target;
        // Подставляем настоящий src только когда iframe в зоне видимости
        iframe.src = iframe.dataset.src;
        iframe.classList.remove('lazy-iframe');
        frameObserver.unobserve(iframe);
      }
    });
  });

  lazyFrames.forEach(iframe => frameObserver.observe(iframe));
});
