// Example starter JavaScript for disabling form submissions if there are invalid fields
(function() {
  'use strict';

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  let forms = document.querySelectorAll('.needs-validation');
  let modalTour = document.querySelector('.modal-tour');
  let modalSubmitForm = document.getElementById('modal-submit-form');

  // document.addEventListener('DOMContentLoaded', () => {

  // });


  if (modalTour) {
    const modal = new bootstrap.Modal(modalTour);
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);

            modal.hide();
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  } else {
    Array.prototype.slice.call(forms).forEach(function(form) {
      form.addEventListener(
        'submit',
        function(event) {
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
            form.classList.add('was-validated');
          } else {
            event.preventDefault();
            form.classList.remove('was-validated');
            const modalSubmit = new bootstrap.Modal(modalSubmitForm);
            modalSubmit.show();

            modalSubmitForm.addEventListener('hidden.bs.modal', function() {
              form.submit();
              form.reset();
            });
          }
        },
        false,
      );
    });
  }


  // маска для телефона
  // let phones = document.querySelectorAll('input[type="tel"]');
  // phones.forEach(phone => {
  //   let maskOptions = {
  //     mask: '{8} (000)000-00-00',
  //     lazy: true,
  //     autofix: true, // bound value
  //     placeholderChar: '9',
  //   };
  //   new IMask(phone, maskOptions);
  // });
})();


(function() {
  // Объединённая инициализация тултипов
  const initTooltips = (selector, customClass) => {
    return [].slice
      .call(document.querySelectorAll(`[data-bs-toggle="${selector}"]`))
      .map(
        el =>
          new bootstrap.Tooltip(el, {
            customClass: customClass,
            delay: { show: 100, hide: 50 },
          }),
      );
  };

  // // Инициализируем все тултипы
  const tariffTooltips = initTooltips('tariff-tooltip', 'tariff-tooltip');
  const tradeInTooltips = initTooltips('trade-in-tooltip', 'trade-in-tooltip');
  const advantagesTooltips = initTooltips(
    'advantages-tooltip',
    'advantages-tooltip',
  );

  (function() {
    // Данные для фонов (только градиенты и цвета)
    const backgroundData = { bg_1: { gradient: 'linear-gradient(135deg, #585858 0%, #585858 100%)', color: '#fff' }, bg_2: { gradient: 'linear-gradient(135deg, #226B9E 0%, #226B9E 100%)', color: '#fff' }, bg_3: { gradient: 'linear-gradient(135deg, #45281D 0%, #45281D 100%)', color: '#fff' }, bg_4: { gradient: 'linear-gradient(135deg, #3B3230 0%, #3B3230 100%)', color: '#fff' }, bg_5: { gradient: 'linear-gradient(135deg, #DBDAD8 0%, #DBDAD8 100%)', color: '#4b5052' }, bg_6: { gradient: 'linear-gradient(135deg, #522F20 0%, #522F20 100%)', color: '#fff' }, bg_7: { gradient: 'linear-gradient(135deg, #585858 0%, #585858 100%)', color: '#fff' } };

    // Функция для скролла к форме и установки значения в select
    function scrollToForm(button) {
      const formSection = document.getElementById('feedbackForm');

      if (formSection) {
        // Получаем данные из data-атрибутов кнопки
        const tariffName = button.getAttribute('data-tariff-name');
        const tariffPrice = button.getAttribute('data-tariff-price');

        // Плавный скролл к форме
        formSection.scrollIntoView({ behavior: 'smooth', block: 'start' });

        // Устанавливаем значение в select
        setTimeout(() => {
          const tariffSelect = document.querySelector('select[name="formTariff"]');

          if (tariffSelect && tariffPrice) {
            // Устанавливаем значение price в select
            tariffSelect.value = tariffPrice;
            // console.log(`Установлен тариф: ${tariffName}, цена: ${tariffPrice} ₽`);

            // Показываем сообщение о выбранном тарифе
            const selectedTariffInfo = document.querySelector('.selected-tariff-info');
            const selectedTariffText = document.querySelector('#selected-tariff-text');

            // console.log('Found elements:', {
            //   selectedTariffInfo,
            //   selectedTariffText,
            // });

            if (selectedTariffInfo && selectedTariffText) {
              selectedTariffText.textContent = `${tariffName} - ${tariffPrice} ₽/мес`;
              selectedTariffInfo.style.display = 'block';
            }
          } else {
            console.warn(
              'Select с name="formTariff" не найден или нет цены',
              {
                select: tariffSelect,
                price: tariffPrice,
              },
            );
          }
        }, 500);
      } else {
        console.warn('Форма обратной связи не найдена');
        console.log('Available elements with id feedbackForm:', document.getElementById('feedbackForm'));
      }
    }

    // Функция для обновления фона и цвета текста тарифов
    function updateTariffsBackground(slide) {
      const tariffsSection = document.getElementById('tariffsSection');
      const gallerySection = document.querySelector('#js-slider-gallery');

      // Обновляем фон и цвет текста
      if (backgroundData[slide] && tariffsSection) {
        tariffsSection.style.background = backgroundData[slide].gradient;

        // Добавляем data-атрибут с цветом текста
        tariffsSection.setAttribute('style', `--bg-color: ${backgroundData[slide].gradient};--text-color: ${backgroundData[slide].color}`);

        if (gallerySection) {
          gallerySection.setAttribute('style', `--bg-color: ${backgroundData[slide].gradient};--text-color: ${backgroundData[slide].color}`);
        }
      }

      // Подсвечиваем активный тариф
      const allTariffs = document.querySelectorAll('.club-tariff');
      allTariffs.forEach(tariff => {
        tariff.style.transform = 'scale(1)';
        tariff.style.boxShadow = '0 2px 15px rgba(0, 0, 0, 0.1)';
      });

      const activeTariff = document.querySelector(`[data-tariff="${slide}"]`);
      if (activeTariff) {
        activeTariff.style.transform = 'scale(1.05)';
        activeTariff.style.boxShadow = '0 10px 30px rgba(0, 0, 0, 0.2)';
      }
    }

    // Инициализация слайдеров
    const sliderElement = document.querySelector('#js-slider-gallery .swiper-container');
    const tariffsSliderElement = document.querySelector('#js-slider-tariffs .swiper-container');

    let sliderGallery, sliderTariffs;

    // Основной слайдер с картинками
    if (sliderElement) {
      sliderGallery = new Swiper('#js-slider-gallery .swiper-container', {
        slidesPerView: 1,
        loop: true,
        pagination: {
          el: '.page-tariffs__club-gallery .swiper-pagination',
          clickable: true,
        },
        navigation: {
          nextEl: '.page-tariffs__club-gallery .swiper-button-next',
          prevEl: '.page-tariffs__club-gallery .swiper-button-prev',
        },
        on: {
          slideChange: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-slide');
            updateTariffsBackground(slide);
          },
          init: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-slide');
            updateTariffsBackground(slide);
          },
        },
      });
    }

    // Слайдер тарифов БЕЗ loop
    if (tariffsSliderElement) {
      sliderTariffs = new Swiper('#js-slider-tariffs .swiper-container', {
        slidesPerView: 1.05,
        spaceBetween: 5,
        loop: false,
        watchOverflow: true,
        pagination: {
          el: '.club-tariffs .swiper-pagination',
          clickable: true,
        },
        navigation: {
          nextEl: '.club-tariffs .swiper-button-next',
          prevEl: '.club-tariffs .swiper-button-prev',
        },
        breakpoints: {
          // Мобилки до 567px - 1 слайд
          567: {
            slidesPerView: 2,
            spaceBetween: 5,
          },
          // Планшеты 768px - 2.5 слайда (2 с половиной)
          768: {
            slidesPerView: 2.5,
            spaceBetween: 10,
          },
          // Десктоп 1024px - 3 слайда
          1024: {
            slidesPerView: 2.7,
            spaceBetween: 10,
          },
          // Большие экраны 1200px - 4 слайда
          1200: {
            slidesPerView: 4,
            spaceBetween: 10,
          },
        },
        on: {
          slideChange: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-tariff');

            if (!slide) {
              console.error('data-tariff attribute not found in slide');
              return;
            }
          },
          init: function() {
            const activeSlide = this.slides[this.activeIndex];
            const slide = activeSlide.getAttribute('data-tariff');

            if (!slide) {
              console.error(
                'data-tariff attribute not found in slide during init',
              );
              return;
            }
          },
        },
      });

      // Обработчик клика по кнопке "Выбрать" в тарифе
      document.querySelectorAll('.club-tariff__link').forEach(button => {
        button.addEventListener('click', e => {
          e.preventDefault();
          // Скроллим к форме и передаем данные из data-атрибутов
          scrollToForm(button);
        });
      });

      // Обработчик клика по самому тарифу (для переключения слайдеров)
      document.querySelectorAll('.club-tariff').forEach(tariff => {
        tariff.addEventListener('click', e => {
          // Проверяем, что клик не по кнопке "Выбрать"
          if (!e.target.closest('.club-tariff__link')) {
            const slide = tariff.getAttribute('data-tariff');
            // console.log('Tariff clicked:', slide);

            // Переключаем слайдер тарифов
            if (sliderTariffs) {
              const index = Array.from(sliderTariffs.slides).indexOf(tariff);
              if (index !== -1) {
                sliderTariffs.slideTo(index);
              }
            }

            // Переключаем основной слайдер (чтобы синхронизировать и поменять фон)
            if (sliderGallery) {
              const index = Array.from(sliderTariffs.slides).indexOf(tariff);
              if (index !== -1) {
                sliderGallery.slideTo(index);
              }
            }
          }
        });
      });
    }

    // Функция для проверки видимости всех тарифов
    function checkTariffsVisibility() {
      if (!sliderTariffs) return;

      const tariffsContainer = document.querySelector('#js-slider-tariffs');
      const totalSlides = sliderTariffs.slides.length;
      const slidesPerView = sliderTariffs.params.slidesPerView;

      // Если все слайды видны, скрываем навигацию
      if (totalSlides <= slidesPerView) {
        tariffsContainer.classList.add('all-visible');
      } else {
        tariffsContainer.classList.remove('all-visible');
      }
    }

    // Вызываем при ресайзе
    if (sliderTariffs) {
      sliderTariffs.on('resize', checkTariffsVisibility);
      sliderTariffs.on('init', checkTariffsVisibility);
    }

    // Также вызываем при загрузке
    window.addEventListener('load', checkTariffsVisibility);
  })();

  function lazyLoadIframes() {
    const iframes = document.querySelectorAll('.lazy-iframe');

    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const iframe = entry.target;
          const src = iframe.getAttribute('data-src');

          if (src && !iframe.src) {
            iframe.src = src;
            iframe.onload = () => {
              iframe.style.background = 'none';
            };
          }

          observer.unobserve(iframe);
        }
      });
    });

    iframes.forEach(iframe => observer.observe(iframe));
  }

  // Запускаем при загрузке страницы
  document.addEventListener('DOMContentLoaded', lazyLoadIframes);

  // И при динамическом добавлении контента
  if (typeof MutationObserver !== 'undefined') {
    const mutationObserver = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === 1) {
            // Element node
            if (node.matches && node.matches('.lazy-iframe')) {
              lazyLoadIframes();
            }
            if (node.querySelectorAll) {
              const newIframes = node.querySelectorAll('.lazy-iframe');
              if (newIframes.length > 0) {
                lazyLoadIframes();
              }
            }
          }
        });
      });
    });

    mutationObserver.observe(document.body, {
      childList: true,
      subtree: true,
    });
  }
})();
