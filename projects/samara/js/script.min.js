(function() {
  let days = document.querySelector('#days');
  let daysLabel = document.querySelector('#label-days');
  let hoursLabel = document.querySelector('#label-hours');
  let minutesLabel = document.querySelector('#label-minutes');
  let hours = document.querySelector('#hours');
  let minutes = document.querySelector('#minutes');
  // let seconds = document.querySelector('#seconds');

  let dd = document.querySelector('#dd');
  let hh = document.querySelector('#hh');
  let mm = document.querySelector('#mm');
  // let ss = document.querySelector('#ss');


  let declOfNum = function(number, titles) {
    let cases = [2, 0, 1, 1, 1, 2];
    return titles[
      number % 100 > 4 && number % 100 < 20
        ? 2
        : cases[number % 10 < 5 ? number % 10 : 5]
    ];
  };

  //declOfNum(days, ['день', 'дня', 'дней']);
  //declOfNum(hours, ['час', 'часа', 'часов']);
  //declOfNum(minutes, ['минута', 'минуты', 'минут']);
  //declOfNum(seconds, ['секунда', 'секунды', 'секунд']);

  let deadline = new Date('May 24, 2023 00:00:00').getTime();
  // console.log(deadline);

  let x = setInterval(function() {
    let now = new Date().getTime();
    let t = deadline - now;

    let d = Math.floor(t / (1000 * 60 * 60 * 24));
    let h = Math.floor(t % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
    let m = Math.floor(t % (1000 * 60 * 60) / (1000 * 60));
    // let s = Math.floor(t % (1000 * 60) / 1000);

    days.textContent = d;
    hours.textContent = h;
    minutes.textContent = m;
    // seconds.textContent = s;

    daysLabel.textContent = declOfNum(d, ['день', 'дня', 'дней']);
    hoursLabel.textContent = declOfNum(h, ['час', 'часа', 'часов']);
    minutesLabel.textContent = declOfNum(m, ['минута', 'минуты', 'минут']);

    dd.style.strokeDashoffset = 440 - 440 * d / 365;
    hh.style.strokeDashoffset = 440 - 440 * h / 24;
    mm.style.strokeDashoffset = 440 - 440 * m / 60;
    // ss.style.strokeDashoffset = 440 - 440 * s / 60;

    if (t < 0) {
      clearInterval(x);
      d = 0;
      h = 0;
      m = 0;
      // s = 0;

      days.textContent = d;
      hours.textContent = h;
      minutes.textContent = m;
      // seconds.textContent = s;

      dd.style.strokeDashoffset = 440 - 440 * d / 365;
      hh.style.strokeDashoffset = 440 - 440 * h / 24;
      mm.style.strokeDashoffset = 440 - 440 * m / 60;
      // ss.style.strokeDashoffset = 440 - 440 * s / 60;

      // document.querySelector('.timer').style.display = 'none';
    }
  }, 100);
})();

const acc = document.getElementsByClassName("accordion");
let i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    const panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}

const clubs = [
  {
    id: 1,
    organizationID: '238470869064',
    cityTitle: 'Самара',
    title: 'Гудок',
    metro: ['Нет метро'],
    address: 'ул. Красноармейская, д. 131, ТК Гудок',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '1Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.1870108430115,50.128152548591444],
    poster: 'img/club/preview/9.jpg',
    href: 'club.html',
  },
  {
    id: 2,
    organizationID: '81306420845',
    cityTitle: 'Самара',
    title: 'Амбар',
    metro: ['Нет метро'],
    address: 'ТК “Амбар” Южное ш., д., 5',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '2Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.14038,50.173675],
    poster: 'img/club/preview/7.jpg',
    href: 'club.html',
  },
  {
    id: 3,
    organizationID: '90294133913',
    cityTitle: 'Самара',
    title: 'Монте Роза',
    metro: ['Нет метро'],
    address: 'Московское ш., д., 4, к.4, СДЦ "Монте Роза"',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '3Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.204226618761474,50.148408591073824],
    poster: 'img/club/preview/10.jpg',
    href: 'club.html',
  },
  {
    id: 4,
    organizationID: '43935049627',
    cityTitle: 'Самара',
    title: 'Шипка',
    metro: ['Нет метро'],
    address: 'ул. Стара Загора д., 58',
    pool: 'С бассейном',
    working: 'ПН-ПТ 07:00–23:00СБ-ВС 08:00–22:00',
    text:
      '3Светлый и просторный фитнес-клуб с большим бассейном для взрослых и детским бассейном. В клубе предусмотрены комфортные условия для семейного отдыха.',
    center: [53.230887043599246,50.20891922645178],
    poster: 'img/club/preview/8.jpg',
    href: 'club.html',
  },
];


const ymapsTouchScroll = (map, { preventScroll = true, preventTouch = true, textScroll = "Чтобы изменить масштаб, прокручивайте карту, удерживая клавишу Ctrl", textTouch = "Чтобы переместить карту проведите по ней двумя пальцами", } = {}) => {
  if (typeof window === "undefined" ||
      typeof map !== "object" ||
      (!preventScroll && !preventTouch))
      return;
  const eventsPane = map.panes.get("events");
  if (!eventsPane)
      return;
  const eventsPaneEl = eventsPane.getElement();
  const isTouch = /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent);
  const text = isTouch ? textTouch : textScroll;
  const styles = {
      alignItems: "center",
      boxSizing: "border-box",
      color: "#fff",
      display: "flex",
      justifyContent: "center",
      padding: "40px",
      textAlign: "center",
      transition: "background .2s",
      touchAction: "auto",
  };
  Object.keys(styles).forEach((key) => {
      const name = key;
      eventsPaneEl.style[name] = styles[name];
  });
  const hintToggle = (fl) => {
      eventsPaneEl.style.background = `rgba(0, 0, 0, ${fl ? ".6" : "0"})`;
      eventsPaneEl.textContent = fl ? text : "";
  };
  if (preventTouch && isTouch) {
      map.behaviors.disable("drag");
      eventsPaneEl.addEventListener("touchstart", (e) => {
          hintToggle(e.touches.length === 1);
      });
      eventsPaneEl.addEventListener("touchend", (e) => {
          hintToggle(false);
      });
  }
  if (preventScroll && !isTouch) {
      const scrollToggle = (fl) => {
          map.behaviors[fl ? "enable" : "disable"]("scrollZoom");
      };
      let isMouseEnter = false;
      let isCtrlPress = false;
      scrollToggle(false);
      eventsPane.events.add("wheel", () => {
          if (!isMouseEnter)
              return;
          scrollToggle(isCtrlPress);
          hintToggle(!isCtrlPress);
      });
      eventsPane.events.add("mousedown", () => {
          hintToggle(false);
      });
      eventsPane.events.add("mouseenter", () => {
          isMouseEnter = true;
      });
      eventsPane.events.add("mouseleave", () => {
          isMouseEnter = false;
          hintToggle(false);
      });
      document.addEventListener("keydown", (e) => {
          isCtrlPress = e.ctrlKey;
          if (isCtrlPress)
              hintToggle(false);
      });
      document.addEventListener("keyup", () => {
          isCtrlPress = false;
      });
  }
};
export default ymapsTouchScroll;


var iObserver = new IntersectionObserver(
  function(entries) {
    if (entries[0].isIntersecting === true) {
      loadMap();
      iObserver.unobserve(entries[0].target); // перестаём отслеживать видимость
    }
  },
  { threshold: [0] },
); // от 0 до 1, % видимой части элемента на экране

iObserver.observe(document.getElementById('map'));

function loadMap() {
  let map = document.getElementById('map');
  if (!map.classList.contains('js--loaded')) {
    map.classList.add("js--loaded");

    if (typeof ymaps === 'undefined') {
      let js = document.createElement('script');
      js.src = 'https://api-maps.yandex.ru/2.1/?lang=ru_RU';
      document.getElementsByTagName('head')[0].appendChild(js);
      js.onload = function() {
        ymaps.ready(init);

        function init() {
          var map = new ymaps.Map('map', {
            center: [53.195878, 50.100202],
            zoom: 12,
            controls: ['zoomControl'],
          },
          );

          ymapsTouchScroll(map);

          const createPrevieClub = club => {
            return (
              `<div class="balloon">` + club.address + `</div>`
            )
          }
          
          // Создадим коллекцию геообъектов.
          var collection = new ymaps.GeoObjectCollection(null, {
            // Запретим появление балуна.
            hasBalloon: false,
            iconLayout: 'default#image',
            iconImageHref: 'images/icons/pin-orange.svg',
            iconImageSize: [30, 42],
            iconImageOffset: [-5, -38],
          });
          
          
          // Добавим геообъекты в коллекцию.
          for (var i = 0; i < clubs.length; i++) {
            let myPlacemark = new ymaps.Placemark(clubs[i].center, {
              iconImageHref: 'images/icons/pin-orange.svg',
              balloonContent: '1212',
            });
            collection.add(myPlacemark);
          }
          
          
          // Добавим коллекцию на карту.
          map.geoObjects.add(collection);
          
        };

      };
    } else {
      ymaps.ready(init);

    }
  }
}

// ymaps.ready(init);
// let map;

function onEntry(entry) {
  entry.forEach(change => {
    if (change.isIntersecting) {
     change.target.classList.add('element-show');
    }
  });
}

let options = {
  threshold: [0.5] };
let observer = new IntersectionObserver(onEntry, options);
let elements = document.querySelectorAll('.element-animation');

for (let elm of elements) {
  observer.observe(elm);
}

const page = document.querySelector('.page');
const body = document.querySelector('.page-body');
const navigation = document.querySelector('.navigation');
const btnClose = navigation.querySelector('.btn-close');
const btnOpen = document.querySelector('.page-header__btn-menu');

navigation.addEventListener('click', e => {
  e.preventDefault();
  const elem = e.target;
  if (elem.tagName === 'A') {
    const activeId = elem.href.split('#')[1];

    document.getElementById(activeId).scrollIntoView({
      behavior: 'smooth',
      inline: 'start',
    });

    onCloseMenu();
  }
});

const onOverlayCreate = () => {
  const div = document.createElement('div');
  div.className = 'overlay';
  body.appendChild(div);
};

const onOpenMenu = () => {
  if (navigation.classList.contains('close')) {
    navigation.classList.remove('close');
  }

  navigation.classList.add('open');

  onOverlayCreate();
  page.classList.add('no-scroll');

  if (document.querySelector('.overlay')) {
    document.querySelector('.overlay').addEventListener('click', onCloseMenu);
  }
};
const onCloseMenu = () => {
  navigation.classList.remove('open');
  navigation.classList.add('close');
  document.querySelector('.overlay').remove();
  page.classList.remove('no-scroll');
};

btnClose.addEventListener('click', onCloseMenu);
btnOpen.addEventListener('click', onOpenMenu);

const handleClickEscape = e => {
  if (e.key === 'Escape') {
    onCloseMenu();
  }
};

window.addEventListener('keydown', handleClickEscape);


// Image Enlarger / Lightbox (by iNet / IEVEVO)
// Licenced under MIT Open Source

// Enlarges images on click

var gallery_info = { imgs: [], currentIndex: 0 },
  gallery_counter,
  gallery_buttons;

function id(id) {
  return document.getElementById(id);
}

function displayImg(src) {
  // actually displays the image
  id('enlarged-image').src = src;

  // update counter if applicable
  if (gallery_info.imgs.length > 1) {
    // set the counter
    gallery_counter.innerHTML =
      parseInt(gallery_info.currentIndex) + 1 + '/' + gallery_info.imgs.length;

    // show buttons
    for (var i = 0; i < gallery_buttons.length; i++) {
      gallery_buttons[i].classList.remove('hidden');
    }
  } else {
    // hide buttons if theres only 1 image
    for (var i = 0; i < gallery_buttons.length; i++) {
      gallery_buttons[i].classList.add('hidden');
    }
  }
}

function enlargeImg(srcImg) {
  if (srcImg.children[0].tagName === 'PICTURE') {
    // store metadata
    if (
      srcImg.children[0].children[2].getAttribute('data-gallery-index') != null
    ) {
      // if it's a gallery with multiple linked images
      var allImgs = srcImg.children[0].parentNode.parentNode.getElementsByTagName(
        'img',
      );

      gallery_info.currentIndex = srcImg.children[0].children[2].getAttribute(
        'data-gallery-index',
      );
      gallery_info.imgs = allImgs;
    } else {
      // if it's a single image
      gallery_info.currentIndex = 0;
      gallery_info.imgs = [srcImg];
    }

    // Actually enlarge the image
    var large_src = srcImg.children[0].children[2].src;

    // if an alternate SRC is supplied, use this instead
    if (srcImg.children[0].children[2].getAttribute('data-large-src') != null) {
      large_src = srcImg.children[0].children[2].getAttribute('data-large-src');
    }
  } else {
    // store metadata
    if (srcImg.children[0].getAttribute('data-gallery-index') != null) {
      // if it's a gallery with multiple linked images
      var allImgs = srcImg.children[0].parentNode.getElementsByTagName('img');

      gallery_info.currentIndex = srcImg.children[0].getAttribute(
        'data-gallery-index',
      );
      console.log(gallery_info.currentIndex);
      gallery_info.imgs = allImgs;
    } else {
      // if it's a single image
      gallery_info.currentIndex = 0;
      gallery_info.imgs = [srcImg];
    }

    // Actually enlarge the image
    var large_src = srcImg.children[0].src;

    // if an alternate SRC is supplied, use this instead
    if (srcImg.children[0].getAttribute('data-large-src') != null) {
      large_src = srcImg.children[0].getAttribute('data-large-src');
    }


  }
  displayImg(large_src);
    id('enlarged-image').parentNode.classList.add('open');
}

function unenlargeImg() {
  // Close
  id('enlarged-image').parentNode.classList.remove('open');

  gallery_counter.innerHTML = '1/1';
}

function nextImage() {
  // Loads the next image in line
  var src = '';

  // change index
  if (gallery_info.currentIndex + 1 >= gallery_info.imgs.length) {
    // if at the end of the queue
    gallery_info.currentIndex = 0;
  } else {
    // if not at end of queue
    gallery_info.currentIndex = parseInt(gallery_info.currentIndex) + 1;
  }

  // if alt SRC supplied, use this
  if (
    gallery_info.imgs[gallery_info.currentIndex].getAttribute(
      'data-large-src',
    ) != null
  ) {
    src = gallery_info.imgs[gallery_info.currentIndex].getAttribute(
      'data-large-src',
    );
  } else {
    // otherwise, use the src from the img tag
    src = gallery_info.imgs[gallery_info.currentIndex].src;
  }

  // display image
  displayImg(src);
}

function prevImage() {
  // Loads the next image in line
  var src = '';

  // change index
  if (gallery_info.currentIndex <= 0) {
    // if at the end of the queue
    gallery_info.currentIndex = gallery_info.imgs.length - 1;
  } else {
    // if not at end of queue
    gallery_info.currentIndex = parseInt(gallery_info.currentIndex) - 1;
  }

  // if alt SRC supplied, use this
  if (
    gallery_info.imgs[gallery_info.currentIndex].getAttribute(
      'data-large-src',
    ) != null
  ) {
    src = gallery_info.imgs[gallery_info.currentIndex].getAttribute(
      'data-large-src',
    );
  } else {
    // otherwise, use the src from the img tag
    src = gallery_info.imgs[gallery_info.currentIndex].src;
  }

  // display image
  displayImg(src);
}

function initialise() {
  // Set up event listeners
  // In a separate function in case u need to call it after page load
  var galleries = document.getElementsByClassName('scroll-gallery');

  for (var x = 0; x < galleries.length; x++) {
    // for each gallery
    var gallery = galleries[x].children;

    for (var i = 0; i < gallery.length; i++) {
      // for each image, add a click listener
      if (gallery[i].children[0].tagName === 'IMG') {
        if (gallery[i].children[0].src != '') {
          let src = gallery[i].children[0].src;

          gallery[i].onclick = function() {
            enlargeImg(this);
          };
        }
      } else if (gallery[i].children[0].tagName === 'PICTURE') {
        if (gallery[i].children[0].children[2].src != '') {
          // let src = gallery[i].src;
          let src = gallery[i].children[0].children[2].src;

          gallery[i].onclick = function() {
            enlargeImg(this);
          };
        }
      }
    }
  }
}

window.addEventListener('load', function() {
  initialise();

  // Set up big img element
  var el = document.createElement('div'),
    prevBtn = document.createElement('div'),
    nextBtn = document.createElement('div'),
    counter = document.createElement('span');

  // image
  el.innerHTML = "<img class='img-enlarged' id='enlarged-image' />";
  el.classList.add('img-enlarged__cont');
  el.onclick = function() {
    unenlargeImg();
  };

  // prev / next buttons
  prevBtn.innerHTML = '<span></span>';
  prevBtn.classList.add('img-enlarged__nav');
  prevBtn.classList.add('prev');
  prevBtn.onclick = function(event) {
    event.stopPropagation();
    prevImage();
  };

  nextBtn.innerHTML = '<span></span>';
  nextBtn.classList.add('img-enlarged__nav');
  nextBtn.classList.add('next');
  nextBtn.onclick = function(event) {
    event.stopPropagation();
    nextImage();
  };

  // counter
  counter.innerHTML = '1/1';
  counter.classList.add('img-enlarged__counter');
  counter.classList.add('nosel');

  el.appendChild(prevBtn);
  el.appendChild(counter);
  el.appendChild(nextBtn);
  document.body.appendChild(el);

  gallery_counter = counter;
  gallery_buttons = [prevBtn, nextBtn];
});

// Всплывающее окно при закрытии страницы
$(document).mouseleave(function(e){
  if (e.clientY < 0) {
  $("#modal-stop").modal('show');
  }
 });
 // Если окно закрыли, то удаляем его, чтобы оно больше не открывалось
 $('#modal-stop').on('hidden.bs.modal', function () {
  $("#modal-stop").remove();
 });

// Fetch all the forms we want to apply custom Bootstrap validation styles to
let forms = document.querySelectorAll('.needs-validation');
let modalMessage = document.getElementById('modal-message');
let modalPay = document.getElementById('exampleModal');
const fieldDate = modalPay.querySelector('[type="date"]');

// Tooltip
new bootstrap.Tooltip(document.getElementById('tooltip14'), {
  title: 'Услуга не может быть оказана лицам моложе 14 лет',
  placement: 'right',
});

// mask
$('.mask-phone').inputmask({ mask: '+7 (999) 999-99-99' });

function getAge(dateString) {
  let today = new Date();
  let birthDate = new Date(dateString);
  let age = today.getFullYear() - birthDate.getFullYear();

  let m = today.getMonth() - birthDate.getMonth();
  let d = today.getDay() - birthDate.getDay();

  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  if (age === 0) {
    m = 12 + m;
    if (d < 0 || (d === 0 && today.getDate() < birthDate.getDate())) {
      m--;
    }
  }

  // return age ? age + 'г' : m + 'м';
  return age;
}



const modal = new bootstrap.Modal(modalPay);
document.addEventListener('DOMContentLoaded', () => {
  Array.prototype.slice.call(forms).forEach(function(form) {
    form.addEventListener(
      'submit',
      function (event) {
        // console.log(Number.isInteger(getAge(fieldDate.value)));

        if (!form.checkValidity()) {
          event.preventDefault();
          event.stopPropagation();
          form.classList.add('was-validated');
        } else {
          event.preventDefault();
          form.classList.remove('was-validated');
          const modalSubmit = new bootstrap.Modal(modalMessage);

          modal.hide();
          modalSubmit.show();

          modalMessage.addEventListener('hidden.bs.modal', function() {
            form.submit();
            form.reset();
          });
        }
      },
      false,
    );
  });
});



const messengers = document.querySelector('.messengers');
const btn = document.querySelector('.messengers .btn-close');

if (messengers) {
  btn.addEventListener('click', () => {
    messengers.classList.add('messengers--close');
  })
}

const pageBody = document.querySelector('.page-body');

const scrollUp = 'scroll-up';
const scrollDown = 'scroll-down';
let lastScroll = 0;

window.addEventListener('scroll', () => {
  const currentScroll = window.pageYOffset;
  if (currentScroll <= 0) {
    pageBody.classList.remove(scrollUp);
    return;
  }

  if (currentScroll > lastScroll && !pageBody.classList.contains(scrollDown)) {
    // down
    pageBody.classList.remove(scrollUp);
    pageBody.classList.add(scrollDown);
  } else if (
    currentScroll < lastScroll &&
    pageBody.classList.contains(scrollDown)
  ) {
    // up
    pageBody.classList.remove(scrollDown);
    pageBody.classList.add(scrollUp);
  }
  lastScroll = currentScroll;
});

