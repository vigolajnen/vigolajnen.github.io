(function() {
  let days = document.querySelector('#days');
  let daysLabel = document.querySelector('#label-days');
  let hoursLabel = document.querySelector('#label-hours');
  let minutesLabel = document.querySelector('#label-minutes');
  let hours = document.querySelector('#hours');
  let minutes = document.querySelector('#minutes');
  // let seconds = document.querySelector('#seconds');

  let dd = document.querySelector('#dd');
  let hh = document.querySelector('#hh');
  let mm = document.querySelector('#mm');
  // let ss = document.querySelector('#ss');


  let declOfNum = function(number, titles) {
    let cases = [2, 0, 1, 1, 1, 2];
    return titles[
      number % 100 > 4 && number % 100 < 20
        ? 2
        : cases[number % 10 < 5 ? number % 10 : 5]
    ];
  };

  //declOfNum(days, ['день', 'дня', 'дней']);
  //declOfNum(hours, ['час', 'часа', 'часов']);
  //declOfNum(minutes, ['минута', 'минуты', 'минут']);
  //declOfNum(seconds, ['секунда', 'секунды', 'секунд']);

  let deadline = new Date('May 24, 2023 00:00:00').getTime();
  // console.log(deadline);

  let x = setInterval(function() {
    let now = new Date().getTime();
    let t = deadline - now;

    let d = Math.floor(t / (1000 * 60 * 60 * 24));
    let h = Math.floor(t % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));
    let m = Math.floor(t % (1000 * 60 * 60) / (1000 * 60));
    // let s = Math.floor(t % (1000 * 60) / 1000);

    days.textContent = d;
    hours.textContent = h;
    minutes.textContent = m;
    // seconds.textContent = s;

    daysLabel.textContent = declOfNum(d, ['день', 'дня', 'дней']);
    hoursLabel.textContent = declOfNum(h, ['час', 'часа', 'часов']);
    minutesLabel.textContent = declOfNum(m, ['минута', 'минуты', 'минут']);

    dd.style.strokeDashoffset = 440 - 440 * d / 365;
    hh.style.strokeDashoffset = 440 - 440 * h / 24;
    mm.style.strokeDashoffset = 440 - 440 * m / 60;
    // ss.style.strokeDashoffset = 440 - 440 * s / 60;

    if (t < 0) {
      clearInterval(x);
      d = 0;
      h = 0;
      m = 0;
      // s = 0;

      days.textContent = d;
      hours.textContent = h;
      minutes.textContent = m;
      // seconds.textContent = s;

      dd.style.strokeDashoffset = 440 - 440 * d / 365;
      hh.style.strokeDashoffset = 440 - 440 * h / 24;
      mm.style.strokeDashoffset = 440 - 440 * m / 60;
      // ss.style.strokeDashoffset = 440 - 440 * s / 60;

      // document.querySelector('.timer').style.display = 'none';
    }
  }, 100);
})();

const acc = document.getElementsByClassName("accordion");
let i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    const panel = this.nextElementSibling;
    if (panel.style.display === "block") {
      panel.style.display = "none";
    } else {
      panel.style.display = "block";
    }
  });
}

const ymapsTouchScroll = (map, { preventScroll = true, preventTouch = true, textScroll = "Чтобы изменить масштаб, прокручивайте карту, удерживая клавишу Ctrl", textTouch = "Чтобы переместить карту проведите по ней двумя пальцами", } = {}) => {
  if (typeof window === "undefined" ||
      typeof map !== "object" ||
      (!preventScroll && !preventTouch))
      return;
  const eventsPane = map.panes.get("events");
  if (!eventsPane)
      return;
  const eventsPaneEl = eventsPane.getElement();
  const isTouch = /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent);
  const text = isTouch ? textTouch : textScroll;
  const styles = {
      alignItems: "center",
      boxSizing: "border-box",
      color: "#fff",
      display: "flex",
      justifyContent: "center",
      padding: "40px",
      textAlign: "center",
      transition: "background .2s",
      touchAction: "auto",
  };
  Object.keys(styles).forEach((key) => {
      const name = key;
      eventsPaneEl.style[name] = styles[name];
  });
  const hintToggle = (fl) => {
      eventsPaneEl.style.background = `rgba(0, 0, 0, ${fl ? ".6" : "0"})`;
      eventsPaneEl.textContent = fl ? text : "";
  };
  if (preventTouch && isTouch) {
      map.behaviors.disable("drag");
      eventsPaneEl.addEventListener("touchstart", (e) => {
          hintToggle(e.touches.length === 1);
      });
      eventsPaneEl.addEventListener("touchend", (e) => {
          hintToggle(false);
      });
  }
  if (preventScroll && !isTouch) {
      const scrollToggle = (fl) => {
          map.behaviors[fl ? "enable" : "disable"]("scrollZoom");
      };
      let isMouseEnter = false;
      let isCtrlPress = false;
      scrollToggle(false);
      eventsPane.events.add("wheel", () => {
          if (!isMouseEnter)
              return;
          scrollToggle(isCtrlPress);
          hintToggle(!isCtrlPress);
      });
      eventsPane.events.add("mousedown", () => {
          hintToggle(false);
      });
      eventsPane.events.add("mouseenter", () => {
          isMouseEnter = true;
      });
      eventsPane.events.add("mouseleave", () => {
          isMouseEnter = false;
          hintToggle(false);
      });
      document.addEventListener("keydown", (e) => {
          isCtrlPress = e.ctrlKey;
          if (isCtrlPress)
              hintToggle(false);
      });
      document.addEventListener("keyup", () => {
          isCtrlPress = false;
      });
  }
};
export default ymapsTouchScroll;


var iObserver = new IntersectionObserver(function(entries) {
	if (entries[0].isIntersecting === true) {
		loadMap();
		iObserver.unobserve(entries[0].target); // перестаём отслеживать видимость
	}
}, {threshold: [0]}); // от 0 до 1, % видимой части элемента на экране

iObserver.observe(document.getElementById('map'));

function loadMap () {
	let map = document.getElementById('map');
	if (!map.classList.contains("js--loaded")) {
		map.classList.add("'js--loaded");

		if (typeof ymaps === "undefined") {
			let js = document.createElement('script');
			js.src = "https://api-maps.yandex.ru/2.1/?lang=ru_RU";
			document.getElementsByTagName('head')[0].appendChild(js);
			js.onload = function() {
        ymaps.ready(init);
        function init() {
          map = new ymaps.Map('map', {
            center: [53.195878, 50.100202],
            zoom: 11,
            controls: ['zoomControl'],
          });
        }
        ymapsTouchScroll(map);
			};
		} else {
      ymaps.ready(init);
      function init() {
        map = new ymaps.Map('map', {
          center: [53.195878, 50.100202],
          zoom: 11,
          controls: ['zoomControl'],
        });
      }
      ymapsTouchScroll(map);
		}
	}
}

// ymaps.ready(init);
// let map;





function onEntry(entry) {
  entry.forEach(change => {
    if (change.isIntersecting) {
     change.target.classList.add('element-show');
    }
  });
}

let options = {
  threshold: [0.5] };
let observer = new IntersectionObserver(onEntry, options);
let elements = document.querySelectorAll('.element-animation');

for (let elm of elements) {
  observer.observe(elm);
}

const page = document.querySelector('.page');
const body = document.querySelector('.page-body');
const navigation = document.querySelector('.navigation');
const btnClose = navigation.querySelector('.btn-close');
const btnOpen = document.querySelector('.page-header__btn-menu');

navigation.addEventListener('click', e => {
  e.preventDefault();
  const elem = e.target;
  if (elem.tagName === 'A') {
    const activeId = elem.href.split('#')[1];

    document.getElementById(activeId).scrollIntoView({
      behavior: 'smooth',
      inline: 'start',
    });

    onCloseMenu();
  }
});

const onOverlayCreate = () => {
  const div = document.createElement('div');
  div.className = 'overlay';
  body.appendChild(div);
}

const onOpenMenu = () => {
  navigation.classList.add('open');
  onOverlayCreate();
  page.classList.add('no-scroll');

};
const onCloseMenu = () => {
  navigation.classList.remove('open');
  document.querySelector('.overlay').remove();
  page.classList.remove('no-scroll');
};

btnClose.addEventListener('click', onCloseMenu);
btnOpen.addEventListener('click', onOpenMenu);

