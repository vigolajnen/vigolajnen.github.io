{"version":3,"sources":["base.scss","utils.scss","fonts.scss","main.min.css","mixins.scss","blocks/page-content.scss","blocks/poll.scss","blocks/logo.scss"],"names":[],"mappings":"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","file":"main.min.css","sourcesContent":["@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,400,700,800&display=swap&subset=cyrillic');\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n  outline: none;\r\n}\r\n\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  position: relative;\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: $mainFont;\r\n  // font-size: $mainFontSize;\r\n  font-weight: $mainFontWeight;\r\n  line-height: $mainLineHeight;\r\n  color: $text-color;\r\n\r\n  scroll-behavior: smooth;\r\n}\r\n\r\nimg {\r\n  max-width: 100%;\r\n  height: auto;\r\n  object-fit: cover;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6 {\r\n  margin-bottom: 20px;\r\n  font-family: $mainFont;\r\n  font-size: 1.15rem;\r\n  font-weight: 600;\r\n  line-height: normal;\r\n}\r\n\r\na:not([class*='']) {\r\n  text-decoration: none;\r\n}\r\n// footer к низу\r\n\r\n.wrapper {\r\n  width: 100%;\r\n  min-height: 100%;\r\n}\r\n.main {\r\n  min-height: calc(100% - 400px);\r\n  overflow-x: hidden;\r\n}\r\n\r\n.box-center {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  // height: 100%;\r\n  // width: 100%;\r\n}\r\n\r\n.overlay {\r\n  overflow: hidden;\r\n  height: 100vh;\r\n}\r\n\r\n.scroll-content {\r\n  overflow-y: auto;\r\n  height: 100%;\r\n}\r\n\r\n.active {\r\n  max-height: auto;\r\n  transition: 0.5s;\r\n  overflow: visible;\r\n}\r\n.closed {\r\n  max-height: 0;\r\n  transition: 0.5s;\r\n  overflow: hidden;\r\n}\r\n\r\n.no-list {\r\n  @include listReset();\r\n}\r\n\r\n.small {\r\n  font-size: 65%;\r\n  @media (min-width: 767px) {\r\n    font-size: 80%;\r\n  }\r\n}\r\n\r\n.dropdown-menu {\r\n  padding: 1rem 0;\r\n}\r\n\r\n.dropdown-menu.show {\r\n  transform: translate3d(0, 30px, 0px) !important;\r\n}\r\n\r\n.dropdown-item.link {\r\n  display: block;\r\n  color: $link-color;\r\n}\r\n\r\n.dropdown-item:focus,\r\n.dropdown-item:hover {\r\n  background-color: $primary-color;\r\n}\r\n\r\n.map {\r\n  position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n}\r\n\r\n.container--center {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n  }\r\n\r\n\r\n  .contacts {\r\n    &__info {\r\n      min-height: 20rem;\r\n\r\n      @include for-size(tablet-portrait-up) {\r\n        min-height: 40rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  .link {\r\n    color: $link-color;\r\n  }\r\n",".visually-hidden {\r\n  position: absolute;\r\n  overflow: hidden;\r\n  clip: rect(0 0 0 0);\r\n  width: 1px;\r\n  height: 1px;\r\n  margin: -1px;\r\n  padding: 0;\r\n  white-space: nowrap;\r\n  border: 0;\r\n  clip-path: inset(100%);\r\n}\r\n","@font-face {\r\n  font-family: $mainFont;\r\n  font-display: auto;\r\n  src: url(\"../fonts/GoogleSans-Regular.woff2\") format(\"woff2\"),\r\n    url(\"../fonts/GoogleSans-Regular.woff\") format(\"woff\");\r\n  font-weight: 300;\r\n  font-style: normal;\r\n}\r\n@font-face {\r\n  font-family: $mainFont2;\r\n  font-display: auto;\r\n  src: url(\"../fonts/Intro.woff2\") format(\"woff2\"),\r\n    url(\"../fonts/Intro.woff\") format(\"woff\");\r\n  font-weight: 600;\r\n  font-style: normal;\r\n}\r\n","@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700,800&display=swap&subset=cyrillic);.visually-hidden{position:absolute;overflow:hidden;clip:rect(0 0 0 0);width:1px;height:1px;margin:-1px;padding:0;white-space:nowrap;border:0;-webkit-clip-path:inset(100%);clip-path:inset(100%)}@font-face{font-family:\"Open Sans\",sans-serif;font-display:auto;src:url(../fonts/GoogleSans-Regular.woff2) format(\"woff2\"),url(../fonts/GoogleSans-Regular.woff) format(\"woff\");font-weight:300;font-style:normal}@font-face{font-family:Intro,sans-serif;font-display:auto;src:url(../fonts/Intro.woff2) format(\"woff2\"),url(../fonts/Intro.woff) format(\"woff\");font-weight:600;font-style:normal}*,::after,::before{-webkit-box-sizing:border-box;box-sizing:border-box;outline:0}*{margin:0;padding:0}body,html{height:100%}body{position:relative;margin:0;padding:0;font-family:\"Open Sans\",sans-serif;font-weight:600;line-height:24px;color:#1a1a1a;scroll-behavior:smooth}img{max-width:100%;height:auto;-o-object-fit:cover;object-fit:cover}h1,h2,h3,h4,h5,h6{margin-bottom:20px;font-family:\"Open Sans\",sans-serif;font-size:1.15rem;font-weight:600;line-height:normal}a:not([class*='']){text-decoration:none}.wrapper{width:100%;min-height:100%}.main{min-height:calc(100% - 400px);overflow-x:hidden}.box-center{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.overlay{overflow:hidden;height:100vh}.scroll-content{overflow-y:auto;height:100%}.active{max-height:auto;-webkit-transition:.5s;transition:.5s;overflow:visible}.closed{max-height:0;-webkit-transition:.5s;transition:.5s;overflow:hidden}.no-list{list-style:none;margin:0;padding:0}.small{font-size:65%}@media (min-width:767px){.small{font-size:80%}}.dropdown-menu{padding:1rem 0}.dropdown-menu.show{-webkit-transform:translate3d(0,30px,0)!important;transform:translate3d(0,30px,0)!important}.dropdown-item.link{display:block;color:#008dca}.dropdown-item:focus,.dropdown-item:hover{background-color:#0075ab}.map{position:absolute;top:0;left:0;z-index:1;width:100%;height:100%;overflow:hidden}.container--center{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:100%}.contacts__info{min-height:20rem}@media (min-width:769px){.contacts__info{min-height:40rem}}.link{color:#008dca}.page-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:20px 15px 0;width:100%;height:100%;min-height:100vh;background-image:url(../img/bg.jpg);background-color:#42aad0;background-size:cover;background-position:center;background-repeat:no-repeat}@media (min-width:1640px){.page-content{padding-top:5rem}}.poll{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;height:100%;width:100%}.poll__inner{padding:1rem;padding-bottom:3rem;margin:1rem auto;max-width:68.75rem;background-color:#ebebeb;text-align:center;border-radius:20px;-webkit-box-shadow:0 0 15px 3px grey;box-shadow:0 0 15px 3px grey}@media (min-width:1440px){.poll__inner{padding:3rem}}.poll__inner--question{position:relative}.poll__inner--question::before{content:\"\";position:absolute;top:-2rem;left:-2rem;width:6.25rem;height:6.25rem;background-image:url(../img/icons/icon-question.png);background-repeat:no-repeat;background-size:contain}.poll__inner--heart{position:relative}.poll__inner--heart::before{content:\"\";position:absolute;bottom:-65px;left:50%;width:300px;height:160px;background-image:url(../img/heart.png);background-repeat:no-repeat;background-size:contain;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.poll__inner--sm{max-width:50rem}.poll__item{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.poll__item:not(:first-child){display:none}.poll__item--doctor{position:relative}.poll__item--doctor::before{content:\"\";position:absolute;bottom:0;left:0;width:30%;height:100%;background-image:url(../img/doctor.png);background-repeat:no-repeat;background-size:contain;background-position:0 100%}@media (min-width:1440px){.poll__item--doctor::before{left:10%}}.poll__title{margin-bottom:2rem;font-size:35px;font-weight:800;line-height:normal;color:#74d123;text-transform:uppercase;-webkit-text-stroke-width:2px;-webkit-text-stroke-color:#fff}@media (min-width:375px){.poll__title{font-size:calc(1.61812vw + 28.93204px)}}@media (min-width:1920px){.poll__title{font-size:60px}}.poll__text{margin-bottom:3rem;padding-top:2rem;font-size:22px;font-weight:800;line-height:normal;color:#100142;text-transform:uppercase}@media (min-width:375px){.poll__text{font-size:calc(1.8123vw + 15.20388px)}}@media (min-width:1920px){.poll__text{font-size:50px}}@media (min-width:1440px){.poll__text{padding-top:0}}.poll__buttons{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;max-width:500px;-ms-flex-pack:distribute;justify-content:space-around;padding:0;margin:0 auto}.poll__buttons .poll__button{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;margin:0 10px;line-height:normal}.poll__button{display:inline-block;vertical-align:middle;padding:1rem;font-size:20px;font-family:Intro,sans-serif;font-weight:600;line-height:normal;text-transform:uppercase;text-shadow:0 3px 5px #272727;color:#fff;background:#7ad822;background:-webkit-gradient(linear,left top,left bottom,from(#7ad822),color-stop(50%,#57af2a),to(#50a62c));background:linear-gradient(to bottom,#7ad822 0,#57af2a 50%,#50a62c 100%);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;border:3px solid #fff;border-radius:30px;-webkit-box-shadow:1px 1px 10px 1px grey;box-shadow:1px 1px 10px 1px grey;outline:0;-webkit-transition:background 5s ease-out;transition:background 5s ease-out}@media (min-width:375px){.poll__button{font-size:calc(2.589vw + 10.29126px)}}@media (min-width:1920px){.poll__button{font-size:60px}}@media (min-width:1440px){.poll__button{padding:1rem 3rem}}.poll__button:focus,.poll__button:hover{outline:0;background:#73cf24;background:-webkit-gradient(linear,left bottom,left top,from(#50a62c),color-stop(50%,#57af2a));background:linear-gradient(0deg,#50a62c 0,#57af2a 50%);color:#fff}.poll__button--no,.poll__button--yes{position:relative;padding:1.4rem;padding-left:5rem}.poll__button--no::before,.poll__button--yes::before{content:\"\";position:absolute;top:50%;left:20px;width:40px;height:50px;background-image:url(../img/icons/icon-thumbs.png);background-size:contain;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.poll__button--yes::before{-webkit-transform:translateY(-50%) rotate(180deg) scale(-1,1);transform:translateY(-50%) rotate(180deg) scale(-1,1)}.poll__button--no{background:#e41f24;background:-webkit-gradient(linear,left top,left bottom,from(#e41f24),color-stop(50%,#c71e25),to(#c21e25));background:linear-gradient(to bottom,#e41f24 0,#c71e25 50%,#c21e25 100%)}.poll__button--no:focus,.poll__button--no:hover{outline:0;background:#e31f24;background:-webkit-gradient(linear,left bottom,left top,from(#c21e25),to(#e41f24));background:linear-gradient(0deg,#c21e25 0,#e41f24 100%);color:#fff}.logo{margin-bottom:1.25rem;max-width:250px}.logo img{max-width:100%;-o-object-fit:contain;object-fit:contain}\n/*# sourceMappingURL=main.min.css.map */\n","// контрольные точки\r\n// пример использования\r\n// .my-box {\r\n//   padding: 10px;\r\n\r\n//   @include for-size(desktop-up) {\r\n//     padding: 20px;\r\n//   }\r\n// }\r\n@mixin for-size($size) {\r\n  @if $size == phone-only {\r\n    @media (max-width: 599px) {\r\n      @content;\r\n    }\r\n  } @else if $size == tablet-portrait-up {\r\n    @media (min-width: 769px) {\r\n      @content;\r\n    }\r\n  } @else if $size == tablet-portrait-down {\r\n    @media (max-width: 768px) {\r\n      @content;\r\n    }\r\n  } @else if $size == tablet-landscape-up {\r\n    @media (min-width: 900px) {\r\n      @content;\r\n    }\r\n  } @else if $size == tablet-landscape-down {\r\n    @media (max-width: 900px) {\r\n      @content;\r\n    }\r\n  } @else if $size == desktop-up {\r\n    @media (min-width: 1200px) {\r\n      @content;\r\n    }\r\n  } @else if $size == desktop-down {\r\n    @media (max-width: 1199px) {\r\n      @content;\r\n    }\r\n  } @else if $size == big-desktop-up {\r\n    @media (min-width: 1800px) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n// списиок\r\n\r\n@mixin listReset() {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n// ссылки\r\n\r\n@mixin linkReset() {\r\n  text-decoration: none;\r\n}\r\n\r\n// цвета\r\n\r\n@function darker($color, $tone) {\r\n  $adjust: -16 * $tone;\r\n  @return adjust-color($color, $red: $adjust, $green: $adjust, $blue: $adjust);\r\n}\r\n\r\n@function lighter($color, $tone) {\r\n  $adjust: 16 * $tone;\r\n  @return adjust-color($color, $red: $adjust, $green: $adjust, $blue: $adjust);\r\n}\r\n\r\n//hex to rgba\r\n\r\n// .element {<br>\r\n// @include background-opacity(#000, 0.3);<br>\r\n// }\r\n\r\n@mixin background-opacity($color, $opacity: 0.5) {\r\n  background: $color; /* На всякий случай */\r\n  background: rgba($color, $opacity);\r\n}\r\n\r\n// адаптивные шрифты\r\n\r\n@function strip-unit($number) {\r\n  @if type-of($number) == \"number\" and not unitless($number) {\r\n    @return $number / ($number * 0 + 1);\r\n  }\r\n\r\n  @return $number;\r\n}\r\n\r\n@function calcFluidFontSize($f-min, $f-max, $w-min, $w-max, $units: px) {\r\n  $f-min: strip-unit($f-min);\r\n  $f-max: strip-unit($f-max);\r\n  $w-min: strip-unit($w-min);\r\n  $w-max: strip-unit($w-max);\r\n\r\n  $k: ($f-max - $f-min)/ ($w-max - $w-min);\r\n  $b: $f-min - $k * $w-min;\r\n\r\n  $b: $b + $units;\r\n\r\n  @return calc(#{$k} * 100vw + #{$b});\r\n}\r\n\r\n@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $fallback: false) {\r\n  font-size: $f-min;\r\n\r\n  @media (min-width: $w-min) {\r\n    @if ($fallback) {\r\n      font-size: $fallback;\r\n    }\r\n\r\n    font-size: calcFluidFontSize($f-min, $f-max, $w-min, $w-max, px);\r\n  }\r\n\r\n  @media (min-width: $w-max) {\r\n    font-size: $f-max;\r\n  }\r\n}\r\n\r\n// шрифты\r\n\r\n@mixin ff($property, $map) {\r\n  $length: length(map-keys($map));\r\n\r\n  @if $length < 2 {\r\n    @error \"ff() $map requires at least values\";\r\n  }\r\n\r\n  $map: map-sort($map);\r\n  $keys: map-keys($map);\r\n  #{$property}: map-get($map, nth($keys, 1));\r\n\r\n  @for $i from 1 through $length - 1 {\r\n    @media (min-width: nth($keys, $i)) {\r\n      #{$property}: linear-interpolation(\r\n        (\r\n          nth($keys, $i): map-get($map, nth($keys, $i)),\r\n          nth($keys, $i + 1): map-get($map, nth($keys, $i + 1))\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  @media (min-width: nth($keys, $length)) {\r\n    #{$property}: map-get($map, nth($keys, $length));\r\n  }\r\n}\r\n\r\n@function linear-interpolation($map) {\r\n  $keys: map-keys($map);\r\n\r\n  @if length($keys) !=2 {\r\n    @error \"linear-interpolation() $map must be exactly 2 values\";\r\n  }\r\n\r\n  $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1))) /\r\n    (nth($keys, 2) - nth($keys, 1));\r\n  $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);\r\n  $sign: \"+\";\r\n\r\n  @if $b < 0 {\r\n    $sign: \"-\";\r\n    $b: abs($b);\r\n  }\r\n\r\n  @return calc(#{$m * 100}vw #{$sign} #{$b});\r\n}\r\n\r\n@function list-sort($list) {\r\n  $sortedlist: ();\r\n\r\n  @while length($list) >0 {\r\n    $value: nth($list, 1);\r\n\r\n    @each $item in $list {\r\n      @if $item < $value {\r\n        $value: $item;\r\n      }\r\n    }\r\n\r\n    $sortedlist: append($sortedlist, $value, \"space\");\r\n    $list: list-remove($list, index($list, $value));\r\n  }\r\n\r\n  @return $sortedlist;\r\n}\r\n\r\n@function map-sort($map) {\r\n  $keys: list-sort(map-keys($map));\r\n  $sortedMap: ();\r\n\r\n  @each $key in $keys {\r\n    $sortedMap: map-merge(\r\n      $sortedMap,\r\n      (\r\n        $key: map-get($map, $key)\r\n      )\r\n    );\r\n  }\r\n\r\n  @return $sortedMap;\r\n}\r\n\r\n@function list-remove($list, $index) {\r\n  $newList: ();\r\n\r\n  @for $i from 1 through length($list) {\r\n    @if $i !=$index {\r\n      $newList: append($newList, nth($list, $i), \"space\");\r\n    }\r\n  }\r\n\r\n  @return $newList;\r\n}\r\n\r\n// rem\r\n\r\n/**\r\n * Rem-converter mixin to convert px to rem\r\n */\r\n@mixin px-to-rem($pxValue, $property: \"font-size\", $standard-size: 16) {\r\n  #{$property}: $pxValue + px;\r\n  #{$property}: $pxValue/$standard-size + rem;\r\n}\r\n\r\n/**\r\n * Usages\r\n */\r\n\r\n// // 1.1 Using it with font-size (default property)\r\n// h1 {\r\n//   @include px-to-rem(32);\r\n// }\r\n\r\n// // 1.2 Using it with padding (custom property)\r\n// h1{\r\n//   @include px-to-rem(20, padding);\r\n\r\n// }\r\n\r\n$rem-baseline: 16px !default;\r\n$rem-fallback: false !default;\r\n$rem-px-only: false !default;\r\n\r\n@function rem-separator($list, $separator: false) {\r\n  @if $separator == \"comma\" or $separator == \"space\" {\r\n    @return append($list, null, $separator);\r\n  }\r\n\r\n  @if function-exists(\"list-separator\") == true {\r\n    @return list-separator($list);\r\n  }\r\n\r\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n  $test-list: ();\r\n  @each $item in $list {\r\n    $test-list: append($test-list, $item, space);\r\n  }\r\n\r\n  @return if($test-list == $list, space, comma);\r\n}\r\n\r\n@mixin rem-baseline($zoom: 100%) {\r\n  font-size: $zoom / 16px * $rem-baseline;\r\n}\r\n\r\n@function rem-convert($to, $values...) {\r\n  $result: ();\r\n  $separator: rem-separator($values);\r\n\r\n  @each $value in $values {\r\n    @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\r\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\r\n    } @else if\r\n      type-of($value) ==\r\n      \"number\" and\r\n      unit($value) ==\r\n      \"px\" and\r\n      $to ==\r\n      \"rem\"\r\n    {\r\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\r\n    } @else if type-of($value) == \"list\" {\r\n      $value-separator: rem-separator($value);\r\n      $value: rem-convert($to, $value...);\r\n      $value: rem-separator($value, $value-separator);\r\n      $result: append($result, $value, $separator);\r\n    } @else {\r\n      $result: append($result, $value, $separator);\r\n    }\r\n  }\r\n\r\n  @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function rem($values...) {\r\n  @if $rem-px-only {\r\n    @return rem-convert(px, $values...);\r\n  } @else {\r\n    @return rem-convert(rem, $values...);\r\n  }\r\n}\r\n\r\n@mixin rem($properties, $values...) {\r\n  @if type-of($properties) == \"map\" {\r\n    @each $property in map-keys($properties) {\r\n      @include rem($property, map-get($properties, $property));\r\n    }\r\n  } @else {\r\n    @each $property in $properties {\r\n      @if $rem-fallback or $rem-px-only {\r\n        #{$property}: rem-convert(px, $values...);\r\n      }\r\n      @if not $rem-px-only {\r\n        #{$property}: rem-convert(rem, $values...);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Function px to vw\r\n\r\n\r\n// grid\r\n\r\n$grid: (\r\n  breakpoints: (\r\n    xs: 0px,\r\n    xsm: 600px,\r\n    sm: 769px,\r\n    md: 900px,\r\n    lg: 1200px,\r\n    xl: 1800px\r\n  ),\r\n  columns: 12,\r\n  gap: 15px,\r\n  container: 15px,\r\n  box-sizing: border-box,\r\n  mode: flex\r\n);\r\n\r\n@function fastGridListToMap($list, $settings) {\r\n  $result: ();\r\n  $i: 0;\r\n  $breakpoints: map-get($settings, breakpoints);\r\n  @each $breakpoint, $value in $breakpoints {\r\n    $i: $i + 1;\r\n    $value: if(length($list) >= $i, nth($list, $i), null);\r\n    @if $value != null {\r\n      $result: map-merge($result, ($breakpoint: $value));\r\n    }\r\n  }\r\n  @return $result;\r\n}\r\n\r\n@function fastGridNormalizeSpans($spans, $settings) {\r\n  $columns: map-get($settings, columns);\r\n  @if type-of($spans) != map {\r\n    $len: length($spans);\r\n    @if $len >= 3 and nth($spans, $len - 1) == 'of' {\r\n      $columns: nth($spans, $len);\r\n      @if ($len > 3) {\r\n        $spans: set-nth($spans, $len, null);\r\n        $spans: set-nth($spans, $len - 1, null);\r\n        $spans: fastGridListToMap($spans, $settings);\r\n      } @else {\r\n        $spans: nth($spans, 1);\r\n      }\r\n    } @else {\r\n      $spans: fastGridListToMap($spans, $settings);\r\n    }\r\n  }\r\n  @return $spans, $columns;\r\n}\r\n\r\n// get width for breakpoint\r\n@function grid-width($breakpoint, $settings: null) {\r\n  $settings: $grid !default;\r\n  @return map-get(map-get($settings, breakpoints), $breakpoint);\r\n}\r\n\r\n// apply breakpoint rules\r\n@mixin grid-breakpoint($breakpoint, $settings: null) {\r\n  @media (min-width: grid-width($breakpoint, $settings)) {\r\n    @content\r\n  }\r\n}\r\n\r\n@mixin grid-container($from: null, $to: null, $settings: null) {\r\n  $settings: if($settings != null, map-merge($grid, $settings), $grid);\r\n  $gap: map-get($settings, container);\r\n  $map: map_get($settings, breakpoints);\r\n  width: 100%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\r\n  @if type-of($gap) == number {\r\n    padding-left: $gap;\r\n    padding-right: $gap;\r\n  }\r\n  @if (type-of($gap) == list) {\r\n    $gap: fastGridListToMap($gap, $settings);\r\n  }\r\n\r\n  $found: false;\r\n  $break: false;\r\n  @each $breakpoint, $minWidth in $map {\r\n    @if $breakpoint == $from {\r\n      $found: true;\r\n    }\r\n    @if $found == true and $break == false or (type-of($from) == list and index($from, $breakpoint) != null) {\r\n      @if $minWidth > 0 {\r\n        @media (min-width: $minWidth) {\r\n          max-width: $minWidth;\r\n        }\r\n      } @else {\r\n        max-width: $minWidth;\r\n      }\r\n    }\r\n    @if type-of($gap) == map {\r\n      $gapLocal: map-get($gap, $breakpoint);\r\n      @if $minWidth > 0 {\r\n        @media (min-width: $minWidth) {\r\n          padding-left: $gapLocal;\r\n          padding-right: $gapLocal;\r\n        }\r\n      } @else {\r\n        padding-left: $gapLocal;\r\n        padding-right: $gapLocal;\r\n      }\r\n    }\r\n    @if $breakpoint == $to {\r\n      $break: true;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@mixin grid-row($settings: null) {\r\n  $settings: if($settings != null, map-merge($grid, $settings), $grid);\r\n  $gap: map-get($settings, gap);\r\n  $mode: map-get($settings, mode);\r\n\r\n  @if ($mode == float) {\r\n    &:before, &:after {\r\n      content: ' ';\r\n      display: table;\r\n      clear: both;\r\n    }\r\n  } @else {\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n  }\r\n\r\n  @if type-of($gap) == number {\r\n    margin-left: -$gap;\r\n    margin-right: -$gap;\r\n  } @else {\r\n    @if (type-of($gap) == list) {\r\n      $gap: fastGridListToMap($gap, $settings);\r\n    }\r\n    @each $breakpoint, $value in $gap {\r\n      $minWidth: grid-width($breakpoint, $settings);\r\n      @if $minWidth > 0 {\r\n        @media (min-width: $minWidth) {\r\n          margin-left: -$value;\r\n          margin-right: -$value;\r\n        }\r\n      } @else {\r\n        margin-left: -$value;\r\n        margin-right: -$value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin grid-col-internal($box-sizing, $span, $columns, $gap, $gapLocal) {\r\n  @if $span != null {\r\n    $gapAlways: if($gapLocal == null, $gap, $gapLocal);\r\n    width: 100% * $span / $columns - if($box-sizing == content-box and unit($gapAlways) == '%', $gapAlways * 2, 0);\r\n    @if $box-sizing == content-box and unit($gapAlways) != '%' {\r\n      box-sizing: border-box;\r\n    }\r\n  }\r\n  padding-left: $gapLocal;\r\n  padding-right: $gapLocal;\r\n}\r\n\r\n@mixin grid-col($spans, $settings: null) {\r\n  $settings: if($settings != null, map-merge($grid, $settings), $grid);\r\n  $gap: map-get($settings, gap);\r\n  $box-sizing: map-get($settings, box-sizing);\r\n  $mode: map-get($settings, mode);\r\n  $map: map-get($settings, breakpoints);\r\n  $spans: fastGridNormalizeSpans($spans, $settings);\r\n  $columns: nth($spans, 2);\r\n  $spans: nth($spans, 1);\r\n\r\n  @if ($mode == float) {\r\n    float: left;\r\n  }\r\n\r\n  @if type-of($gap) == number {\r\n    padding-left: $gap;\r\n    padding-right: $gap;\r\n  } @else {\r\n    @if (type-of($gap) == list) {\r\n      $gap: fastGridListToMap($gap, $settings);\r\n    }\r\n  }\r\n\r\n  @each $breakpoint, $minWidth in $map {\r\n    $span: map-get($spans, $breakpoint);\r\n    @if type-of($span) == list and nth($span, 2) == 'of' {\r\n      $columnsLocal: nth($span, 3);\r\n      $span: nth($span, 1);\r\n    }\r\n    $columnsLocal: $columns !default;\r\n\r\n    $gapLocal: null;\r\n    @if type-of($gap) == map {\r\n      $gapLocal: map-get($gap, $breakpoint);\r\n    }\r\n\r\n    @if $minWidth > 0 {\r\n      @media (min-width: $minWidth) {\r\n        @include grid-col-internal($box-sizing, $span, $columnsLocal, $gap, $gapLocal);\r\n      }\r\n    } @else {\r\n      @include grid-col-internal($box-sizing, $span, $columnsLocal, $gap, $gapLocal);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@mixin grid-prop($prop, $spans, $settings: null) {\r\n  $settings: if($settings != null, map-merge($grid, $settings), $grid);\r\n  $map: map-get($settings, breakpoints);\r\n  $spans: fastGridNormalizeSpans($spans, $settings);\r\n  $columns: nth($spans, 2);\r\n  $spans: nth($spans, 1);\r\n\r\n  @each $breakpoint, $minWidth in $map {\r\n    $span: map-get($spans, $breakpoint);\r\n    @if type-of($span) == list and nth($span, 2) == 'of' {\r\n      $columnsLocal: nth($span, 3);\r\n      $span: nth($span, 1);\r\n    }\r\n    $columnsLocal: $columns !default;\r\n\r\n    @if $span != null {\r\n      @if $minWidth > 0 {\r\n        @media (min-width: $minWidth) {\r\n          #{$prop}: 100% * $span / $columnsLocal;\r\n        }\r\n      } @else {\r\n        #{$prop}: 100% * $span / $columnsLocal;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin grid-offset($spans, $settings: null) {\r\n  @include grid-prop(margin-left, $spans, $settings);\r\n}\r\n\r\n@mixin grid-move($spans, $settings: null) {\r\n  position: relative;\r\n  @include grid-prop(left, $spans, $settings);\r\n}\r\n",".page-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  padding: 20px 15px 0;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 100vh;\r\n\r\n  background-image: url(\"../img/bg.jpg\");\r\n  background-color: #42aad0;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n\r\n  @media (min-width: 1640px) {\r\n    padding-top: 5rem;\r\n  }\r\n}\r\n",".poll {\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n  height: 100%;\r\n  width: 100%;\r\n\r\n  &__inner {\r\n    padding: 1rem;\r\n    padding-bottom: 3rem;\r\n    margin: 1rem auto;\r\n    max-width: 68.75rem;\r\n    background-color: #ebebeb;\r\n    text-align: center;\r\n    border-radius: 20px;\r\n    box-shadow: 0 0 15px 3px #808080;\r\n\r\n    @media (min-width: 1440px) {\r\n      padding: 3rem;\r\n    }\r\n\r\n    &--question {\r\n      position: relative;\r\n      &::before {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: -2rem;\r\n        left: -2rem;\r\n        width: 6.25rem;\r\n        height: 6.25rem;\r\n        background-image: url(\"../img/icons/icon-question.png\");\r\n        background-repeat: no-repeat;\r\n        background-size: contain;\r\n      }\r\n    }\r\n\r\n    &--heart {\r\n      position: relative;\r\n      &::before {\r\n        content: \"\";\r\n        position: absolute;\r\n        bottom: -65px;\r\n        left: 50%;\r\n        width: 300px;\r\n        height: 160px;\r\n        background-image: url(\"../img/heart.png\");\r\n        background-repeat: no-repeat;\r\n        background-size: contain;\r\n        transform: translateX(-50%);\r\n      }\r\n    }\r\n    &--sm {\r\n      max-width: 50rem;\r\n    }\r\n  }\r\n  &__item {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n    &:not(:first-child) {\r\n      display: none;\r\n    }\r\n\r\n    &--doctor {\r\n      position: relative;\r\n      &::before {\r\n        content: \"\";\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        width: 30%;\r\n        height: 100%;\r\n        background-image: url(\"../img/doctor.png\");\r\n        background-repeat: no-repeat;\r\n        background-size: contain;\r\n        background-position: 0 100%;\r\n\r\n        @media (min-width: 1440px) {\r\n          left: 10%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  &__title {\r\n    margin-bottom: 2rem;\r\n\r\n    @include ff(\"font-size\", $mainTitle);\r\n    font-weight: 800;\r\n    line-height: normal;\r\n    color: #74d123;\r\n    text-transform: uppercase;\r\n\r\n    -webkit-text-stroke-width: 2px;\r\n    -webkit-text-stroke-color: #ffffff;\r\n  }\r\n  &__text {\r\n    margin-bottom: 3rem;\r\n    padding-top: 2rem;\r\n    @include ff(\"font-size\", $mainTitleh1);\r\n    font-weight: 800;\r\n    line-height: normal;\r\n    color: #100142;\r\n\r\n    text-transform: uppercase;\r\n\r\n    @media (min-width: 1440px) {\r\n      padding-top: 0;\r\n    }\r\n  }\r\n  &__buttons {\r\n    display: flex;\r\n    width: 100%;\r\n    max-width: 500px;\r\n    justify-content: space-around;\r\n    padding: 0;\r\n    margin: 0 auto;\r\n\r\n\r\n    & .poll__button {\r\n      flex-grow: 1;\r\n      margin: 0 10px;\r\n      line-height: normal;\r\n    }\r\n  }\r\n  &__button {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    padding: 1rem;\r\n    @include ff(\"font-size\", $mainTitleh2);\r\n    font-family: $mainFont2;\r\n    font-weight: $mainFontWeight-bold;\r\n    line-height: normal;\r\n\r\n    text-transform: uppercase;\r\n\r\n    text-shadow: 0 3px 5px #272727;\r\n\r\n    color: #ffffff;\r\n\r\n    background: #7ad822; /* Old browsers */\r\n    background: -moz-linear-gradient(\r\n      top,\r\n      #7ad822 0%,\r\n      #57af2a 50%,\r\n      #50a62c 100%\r\n    ); /* FF3.6-15 */\r\n    background: -webkit-linear-gradient(\r\n      top,\r\n      #7ad822 0%,\r\n      #57af2a 50%,\r\n      #50a62c 100%\r\n    ); /* Chrome10-25,Safari5.1-6 */\r\n    background: linear-gradient(\r\n      to bottom,\r\n      #7ad822 0%,\r\n      #57af2a 50%,\r\n      #50a62c 100%\r\n    ); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\r\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#7ad822', endColorstr='#50a62c',GradientType=0 ); /* IE6-9 */\r\n\r\n    user-select: none;\r\n    cursor: pointer;\r\n    border: 3px solid #ffffff;\r\n    border-radius: 30px;\r\n\r\n    box-shadow: 1px 1px 10px 1px #808080;\r\n\r\n    outline: none;\r\n\r\n    transition: background 5s ease-out;\r\n\r\n    @media (min-width: 1440px) {\r\n      padding: 1rem 3rem;\r\n    }\r\n\r\n    &:focus,\r\n    &:hover {\r\n      outline: 0;\r\n\r\n      background: rgb(115, 207, 36);\r\n      background: linear-gradient(0deg, #50a62c 0%, #57af2a 50%);\r\n      color: #ffffff;\r\n    }\r\n\r\n    &--no,\r\n    &--yes {\r\n      position: relative;\r\n      padding: 1.4rem;\r\n      padding-left: 5rem;\r\n      &::before {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 20px;\r\n        width: 40px;\r\n        height: 50px;\r\n        background-image: url(\"../img/icons/icon-thumbs.png\");\r\n        background-size: contain;\r\n        transform: translateY(-50%);\r\n      }\r\n\r\n    }\r\n    &--yes {\r\n      &::before {\r\n        transform: translateY(-50%) rotate(180deg) scale(-1, 1);\r\n      }\r\n    }\r\n    &--no {\r\n      background: #e41f24; /* Old browsers */\r\n      background: -moz-linear-gradient(\r\n        top,\r\n        #e41f24 0%,\r\n        #c71e25 50%,\r\n        #c21e25 100%\r\n      ); /* FF3.6-15 */\r\n      background: -webkit-linear-gradient(\r\n        top,\r\n        #e41f24 0%,\r\n        #c71e25 50%,\r\n        #c21e25 100%\r\n      ); /* Chrome10-25,Safari5.1-6 */\r\n      background: linear-gradient(\r\n        to bottom,\r\n        #e41f24 0%,\r\n        #c71e25 50%,\r\n        #c21e25 100%\r\n      ); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\r\n      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#e41f24', endColorstr='#c21e25',GradientType=0 ); /* IE6-9 */\r\n\r\n      &:focus,\r\n      &:hover {\r\n        outline: 0;\r\n\r\n        background: rgb(227, 31, 36);\r\n        background: linear-gradient(0deg, #c21e25 0%, #e41f24 100%);\r\n        color: #ffffff;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".logo {\r\n  margin-bottom: 1.25rem;\r\n  max-width: 250px;\r\n\r\n  & img {\r\n    max-width: 100%;\r\n    object-fit: contain;\r\n  }\r\n}\r\n"]}